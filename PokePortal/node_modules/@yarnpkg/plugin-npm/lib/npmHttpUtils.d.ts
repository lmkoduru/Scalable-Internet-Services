/// <reference types="node" />
import { Configuration, Ident, httpUtils, Project, Cache } from '@yarnpkg/core';
export declare enum AuthType {
    NO_AUTH = 0,
    BEST_EFFORT = 1,
    CONFIGURATION = 2,
    ALWAYS_AUTH = 3
}
type RegistryOptions = {
    ident: Ident;
    registry?: string;
} | {
    ident?: Ident;
    registry: string;
};
export type Options = httpUtils.Options & RegistryOptions & {
    authType?: AuthType;
    otp?: string;
};
/**
 * Consumes all 401 Unauthorized errors and reports them as `AUTHENTICATION_INVALID`.
 *
 * It doesn't handle 403 Forbidden, as the npm registry uses it when the user attempts
 * a prohibited action, such as publishing a package with a similar name to an existing package.
 */
export declare function handleInvalidAuthenticationError(error: any, { attemptedAs, registry, headers, configuration }: {
    attemptedAs?: string;
    registry: string;
    headers: {
        [key: string]: string | undefined;
    } | undefined;
    configuration: Configuration;
}): Promise<void>;
export declare function customPackageError(error: httpUtils.RequestError, configuration: Configuration): string | null;
export declare function getIdentUrl(ident: Ident): string;
export type GetPackageMetadataOptions = Omit<Options, 'ident' | 'configuration'> & {
    cache?: Cache;
    project: Project;
    /**
     * Warning: This option will return all cached metadata if the version is found, but the rest of the metadata can be stale.
     */
    version?: string;
};
/**
 * Caches and returns the package metadata for the given ident.
 *
 * Note: This function only caches and returns specific fields from the metadata.
 * If you need other fields, use the uncached {@link get} or consider whether it would make more sense to extract
 * the fields from the on-disk packages using the linkers or from the fetch results using the fetchers.
 */
export declare function getPackageMetadata(ident: Ident, { cache, project, registry, headers, version, ...rest }: GetPackageMetadataOptions): Promise<PackageMetadata>;
declare const CACHED_FIELDS: readonly ["name", "dist.tarball", "bin", "scripts", "os", "cpu", "libc", "dependencies", "dependenciesMeta", "optionalDependencies", "peerDependencies", "peerDependenciesMeta", "deprecated"];
export type PackageMetadata = {
    'dist-tags': Record<string, string>;
    versions: Record<string, {
        [key in typeof CACHED_FIELDS[number]]: any;
    } & {
        dist: {
            tarball: string;
        };
    }>;
};
export declare function get(path: string, { configuration, headers, ident, authType, registry, ...rest }: Options): Promise<any>;
export declare function post(path: string, body: httpUtils.Body, { attemptedAs, configuration, headers, ident, authType, registry, otp, ...rest }: Options & {
    attemptedAs?: string;
}): Promise<Buffer>;
export declare function put(path: string, body: httpUtils.Body, { attemptedAs, configuration, headers, ident, authType, registry, otp, ...rest }: Options & {
    attemptedAs?: string;
}): Promise<Buffer>;
export declare function del(path: string, { attemptedAs, configuration, headers, ident, authType, registry, otp, ...rest }: Options & {
    attemptedAs?: string;
}): Promise<Buffer>;
export {};
