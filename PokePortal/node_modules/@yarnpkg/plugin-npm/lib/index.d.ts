import { Plugin, miscUtils, Configuration, Ident } from '@yarnpkg/core';
import { NpmHttpFetcher } from './NpmHttpFetcher';
import { NpmRemapResolver } from './NpmRemapResolver';
import { NpmSemverFetcher } from './NpmSemverFetcher';
import { NpmSemverResolver } from './NpmSemverResolver';
import { NpmTagResolver } from './NpmTagResolver';
import * as npmConfigUtils from './npmConfigUtils';
import * as npmHttpUtils from './npmHttpUtils';
import * as npmPublishUtils from './npmPublishUtils';
export { npmConfigUtils };
export { npmHttpUtils };
export { npmPublishUtils };
export { NpmHttpFetcher };
export { NpmRemapResolver };
export { NpmSemverFetcher };
export { NpmSemverResolver };
export { NpmTagResolver };
export interface Hooks {
    /**
     * Called when getting the authentication header for a request to the npm registry.
     * You can use this mechanism to dynamically query a CLI for the credentials for a
     * specific registry.
     */
    getNpmAuthenticationHeader?: (currentHeader: string | undefined, registry: string, { configuration, ident, }: {
        configuration: Configuration;
        ident?: Ident;
    }) => Promise<string | undefined>;
}
declare module '@yarnpkg/core' {
    interface ConfigurationValueMap {
        npmAlwaysAuth: boolean;
        npmAuthIdent: string | null;
        npmAuthToken: string | null;
        npmAuditRegistry: string | null;
        npmPublishRegistry: string | null;
        npmRegistryServer: string;
        npmScopes: Map<string, miscUtils.ToMapValue<{
            npmAlwaysAuth: boolean;
            npmAuthIdent: string | null;
            npmAuthToken: string | null;
            npmPublishRegistry: string | null;
            npmRegistryServer: string;
        }>>;
        npmRegistries: Map<string, miscUtils.ToMapValue<{
            npmAlwaysAuth: boolean;
            npmAuthIdent: string | null;
            npmAuthToken: string | null;
        }>>;
    }
}
declare const plugin: Plugin;
export default plugin;
