"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class ExecCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.commandName = clipanion_1.Option.String();
        this.args = clipanion_1.Option.Proxy();
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project, locator } = await core_1.Project.find(configuration, this.context.cwd);
        await project.restoreInstallState();
        return await core_2.scriptUtils.executePackageShellcode(locator, this.commandName, this.args, {
            cwd: this.context.cwd,
            stdin: this.context.stdin,
            stdout: this.context.stdout,
            stderr: this.context.stderr,
            project,
        });
    }
}
ExecCommand.paths = [
    [`exec`],
];
ExecCommand.usage = clipanion_1.Command.Usage({
    description: `execute a shell script`,
    details: `
      This command simply executes a shell script within the context of the root directory of the active workspace using the portable shell.

      It also makes sure to call it in a way that's compatible with the current project (for example, on PnP projects the environment will be setup in such a way that PnP will be correctly injected into the environment).
    `,
    examples: [[
            `Execute a single shell command`,
            `$0 exec echo Hello World`,
        ], [
            `Execute a shell script`,
            `$0 exec "tsc & babel src --out-dir lib"`,
        ]],
});
exports.default = ExecCommand;
