"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
const get_1 = tslib_1.__importDefault(require("lodash/get"));
const util_1 = require("util");
// eslint-disable-next-line arca/no-default-export
class ConfigGetCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.why = clipanion_1.Option.Boolean(`--why`, false, {
            description: `Print the explanation for why a setting has its value`,
        });
        this.json = clipanion_1.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`,
        });
        this.unsafe = clipanion_1.Option.Boolean(`--no-redacted`, false, {
            description: `Don't redact secrets (such as tokens) from the output`,
        });
        this.name = clipanion_1.Option.String();
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const name = this.name.replace(/[.[].*$/, ``);
        const path = this.name.replace(/^[^.[]*/, ``);
        const setting = configuration.settings.get(name);
        if (typeof setting === `undefined`)
            throw new clipanion_1.UsageError(`Couldn't find a configuration settings named "${name}"`);
        const displayedValue = configuration.getSpecial(name, {
            hideSecrets: !this.unsafe,
            getNativePaths: true,
        });
        const asObject = core_1.miscUtils.convertMapsToIndexableObjects(displayedValue);
        const requestedObject = path
            ? (0, get_1.default)(asObject, path)
            : asObject;
        const report = await core_1.StreamReport.start({
            configuration,
            includeFooter: false,
            json: this.json,
            stdout: this.context.stdout,
        }, async (report) => {
            report.reportJson(requestedObject);
        });
        if (!this.json) {
            if (typeof requestedObject === `string`) {
                this.context.stdout.write(`${requestedObject}\n`);
                return report.exitCode();
            }
            // @ts-expect-error: The Node typings forgot one field
            util_1.inspect.styles.name = `cyan`;
            this.context.stdout.write(`${(0, util_1.inspect)(requestedObject, {
                depth: Infinity,
                colors: configuration.get(`enableColors`),
                compact: false,
            })}\n`);
        }
        return report.exitCode();
    }
}
ConfigGetCommand.paths = [
    [`config`, `get`],
];
ConfigGetCommand.usage = clipanion_1.Command.Usage({
    description: `read a configuration settings`,
    details: `
      This command will print a configuration setting.

      Secrets (such as tokens) will be redacted from the output by default. If this behavior isn't desired, set the \`--no-redacted\` to get the untransformed value.
    `,
    examples: [[
            `Print a simple configuration setting`,
            `yarn config get yarnPath`,
        ], [
            `Print a complex configuration setting`,
            `yarn config get packageExtensions`,
        ], [
            `Print a nested field from the configuration`,
            `yarn config get 'npmScopes["my-company"].npmRegistryServer'`,
        ], [
            `Print a token from the configuration`,
            `yarn config get npmAuthToken --no-redacted`,
        ], [
            `Print a configuration setting as JSON`,
            `yarn config get packageExtensions --json`,
        ]],
});
exports.default = ConfigGetCommand;
