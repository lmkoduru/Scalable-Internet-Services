"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorCodeDetails = void 0;
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
const t = tslib_1.__importStar(require("typanion"));
const version_1 = require("./set/version");
function getCodeName(code) {
    return core_1.MessageName[(0, core_1.parseMessageName)(code)];
}
const ERROR_CODE_DOC_REGEXP = /## (?<code>YN[0-9]{4}) - `(?<name>[A-Z_]+)`\n\n(?<details>(?:.(?!##))+)/gs;
async function getErrorCodeDetails(configuration) {
    const version = core_1.miscUtils.isTaggedYarnVersion(core_1.YarnVersion)
        ? core_1.YarnVersion
        : await (0, version_1.resolveTag)(configuration, `canary`);
    const errorCodesUrl = `https://repo.yarnpkg.com/${version}/packages/gatsby/content/advanced/error-codes.md`;
    const raw = await core_1.httpUtils.get(errorCodesUrl, { configuration });
    return new Map(Array.from(raw.toString().matchAll(ERROR_CODE_DOC_REGEXP), ({ groups }) => {
        if (!groups)
            throw new Error(`Assertion failed: Expected the match to have been successful`);
        const expectedName = getCodeName(groups.code);
        if (groups.name !== expectedName)
            throw new Error(`Assertion failed: Invalid error code data: Expected "${groups.name}" to be named "${expectedName}"`);
        return [groups.code, groups.details];
    }));
}
exports.getErrorCodeDetails = getErrorCodeDetails;
// eslint-disable-next-line arca/no-default-export
class ExplainCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.code = clipanion_1.Option.String({
            required: false,
            validator: t.applyCascade(t.isString(), [
                t.matchesRegExp(/^YN[0-9]{4}$/),
            ]),
        });
        this.json = clipanion_1.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`,
        });
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        if (typeof this.code !== `undefined`) {
            const name = getCodeName(this.code);
            const prettyName = core_1.formatUtils.pretty(configuration, name, core_1.formatUtils.Type.CODE);
            const header = this.cli.format().header(`${this.code} - ${prettyName}`);
            const errorCodeDetails = await getErrorCodeDetails(configuration);
            const details = errorCodeDetails.get(this.code);
            const content = typeof details !== `undefined`
                ? core_1.formatUtils.jsonOrPretty(this.json, configuration, core_1.formatUtils.tuple(core_1.formatUtils.Type.MARKDOWN, {
                    text: details,
                    format: this.cli.format(),
                    paragraphs: true,
                }))
                : `This error code does not have a description.\n\nYou can help us by editing this page on GitHub ðŸ™‚:\n${core_1.formatUtils.jsonOrPretty(this.json, configuration, core_1.formatUtils.tuple(core_1.formatUtils.Type.URL, `https://github.com/yarnpkg/berry/blob/master/packages/gatsby/content/advanced/error-codes.md`))}\n`;
            if (this.json) {
                this.context.stdout.write(`${JSON.stringify({ code: this.code, name, details: content })}\n`);
            }
            else {
                this.context.stdout.write(`${header}\n\n${content}\n`);
            }
        }
        else {
            const tree = {
                children: core_1.miscUtils.mapAndFilter(Object.entries(core_1.MessageName), ([key, value]) => {
                    if (Number.isNaN(Number(key)))
                        return core_1.miscUtils.mapAndFilter.skip;
                    return {
                        label: (0, core_1.stringifyMessageName)(Number(key)),
                        value: core_1.formatUtils.tuple(core_1.formatUtils.Type.CODE, value),
                    };
                }),
            };
            core_1.treeUtils.emitTree(tree, { configuration, stdout: this.context.stdout, json: this.json });
        }
    }
}
ExplainCommand.paths = [
    [`explain`],
];
ExplainCommand.usage = clipanion_1.Command.Usage({
    description: `explain an error code`,
    details: `
      When the code argument is specified, this command prints its name and its details.

      When used without arguments, this command lists all error codes and their names.
    `,
    examples: [[
            `Explain an error code`,
            `$0 explain YN0006`,
        ], [
            `List all error codes`,
            `$0 explain`,
        ]],
});
exports.default = ExplainCommand;
