"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const parsers_1 = require("@yarnpkg/parsers");
const ci_info_1 = tslib_1.__importDefault(require("ci-info"));
const clipanion_1 = require("clipanion");
const semver_1 = tslib_1.__importDefault(require("semver"));
const t = tslib_1.__importStar(require("typanion"));
const LOCKFILE_MIGRATION_RULES = [{
        selector: v => v === -1,
        name: `nodeLinker`,
        value: `node-modules`,
    }, {
        selector: v => v !== -1 && v < 8,
        name: `enableGlobalCache`,
        value: false,
    }, {
        selector: v => v !== -1 && v < 8,
        name: `compressionLevel`,
        value: `mixed`,
    }];
// eslint-disable-next-line arca/no-default-export
class YarnCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.json = clipanion_1.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`,
        });
        this.immutable = clipanion_1.Option.Boolean(`--immutable`, {
            description: `Abort with an error exit code if the lockfile was to be modified`,
        });
        this.immutableCache = clipanion_1.Option.Boolean(`--immutable-cache`, {
            description: `Abort with an error exit code if the cache folder was to be modified`,
        });
        this.refreshLockfile = clipanion_1.Option.Boolean(`--refresh-lockfile`, {
            description: `Refresh the package metadata stored in the lockfile`,
        });
        this.checkCache = clipanion_1.Option.Boolean(`--check-cache`, {
            description: `Always refetch the packages and ensure that their checksums are consistent`,
        });
        this.checkResolutions = clipanion_1.Option.Boolean(`--check-resolutions`, {
            description: `Validates that the package resolutions are coherent`,
        });
        this.inlineBuilds = clipanion_1.Option.Boolean(`--inline-builds`, {
            description: `Verbosely print the output of the build steps of dependencies`,
        });
        this.mode = clipanion_1.Option.String(`--mode`, {
            description: `Change what artifacts installs generate`,
            validator: t.isEnum(core_1.InstallMode),
        });
        // Legacy flags; will emit errors or warnings when used
        this.cacheFolder = clipanion_1.Option.String(`--cache-folder`, { hidden: true });
        this.frozenLockfile = clipanion_1.Option.Boolean(`--frozen-lockfile`, { hidden: true });
        this.ignoreEngines = clipanion_1.Option.Boolean(`--ignore-engines`, { hidden: true });
        this.nonInteractive = clipanion_1.Option.Boolean(`--non-interactive`, { hidden: true });
        this.preferOffline = clipanion_1.Option.Boolean(`--prefer-offline`, { hidden: true });
        this.production = clipanion_1.Option.Boolean(`--production`, { hidden: true });
        this.registry = clipanion_1.Option.String(`--registry`, { hidden: true });
        this.silent = clipanion_1.Option.Boolean(`--silent`, { hidden: true });
        this.networkTimeout = clipanion_1.Option.String(`--network-timeout`, { hidden: true });
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        if (typeof this.inlineBuilds !== `undefined`)
            configuration.useWithSource(`<cli>`, { enableInlineBuilds: this.inlineBuilds }, configuration.startingCwd, { overwrite: true });
        // These variables are used in Google Cloud Platform environment
        // in process of deploying Google Cloud Functions and
        // Google App Engine
        const isGCP = !!process.env.FUNCTION_TARGET || !!process.env.GOOGLE_RUNTIME;
        const deprecationExitCode = await (0, core_1.reportOptionDeprecations)({
            configuration,
            stdout: this.context.stdout,
        }, [{
                // The ignoreEngines flag isn't implemented at the moment. I'm still
                // considering how it should work in the context of plugins - would it
                // make sense to allow them (or direct dependencies) to define new
                // "engine check"? Since it has implications regarding the architecture,
                // I prefer to postpone the decision to later. Also it wouldn't be a flag,
                // it would definitely be a configuration setting.
                option: this.ignoreEngines,
                message: `The --ignore-engines option is deprecated; engine checking isn't a core feature anymore`,
                error: !ci_info_1.default.VERCEL,
            }, {
                // The registry flag isn't supported anymore because it makes little sense
                // to use a registry for a single install. You instead want to configure it
                // for all installs inside a project, so through the .yarnrc.yml file. Note
                // that if absolutely necessary, the old behavior can be emulated by adding
                // the YARN_NPM_REGISTRY_SERVER variable to the environment.
                option: this.registry,
                message: `The --registry option is deprecated; prefer setting npmRegistryServer in your .yarnrc.yml file`,
            }, {
                // The preferOffline flag doesn't make much sense with our architecture.
                // It would require the fetchers to also act as resolvers, which is
                // doable but quirky. Since a similar behavior is available via the
                // --cached flag in yarn add, I prefer to move it outside of the core and
                // let someone implement this "resolver-that-reads-the-cache" logic.
                option: this.preferOffline,
                message: `The --prefer-offline flag is deprecated; use the --cached flag with 'yarn add' instead`,
                error: !ci_info_1.default.VERCEL,
            }, {
                // Since the production flag would yield a different lockfile than the
                // regular installs, it's not part of the regular `install` command anymore.
                // Instead, we expect users to use it with `yarn workspaces focus` (which can
                // be used even outside of monorepos).
                option: this.production,
                message: `The --production option is deprecated on 'install'; use 'yarn workspaces focus' instead`,
                error: true,
            }, {
                // Yarn 2+ isn't interactive during installs anyway, so there's no real point
                // to this flag at the moment.
                option: this.nonInteractive,
                message: `The --non-interactive option is deprecated`,
                error: !isGCP,
            }, {
                // We want to prevent people from using --frozen-lockfile
                // Note: it's been deprecated because we're now locking more than just the
                // lockfile - for example the PnP artifacts will also be locked.
                option: this.frozenLockfile,
                message: `The --frozen-lockfile option is deprecated; use --immutable and/or --immutable-cache instead`,
                callback: () => this.immutable = this.frozenLockfile,
            }, {
                // We also want to prevent them from using --cache-folder
                // Note: it's been deprecated because the cache folder should be set from
                // the settings. Otherwise there would be a very high chance that multiple
                // Yarn commands would use different caches, causing unexpected behaviors.
                option: this.cacheFolder,
                message: `The cache-folder option has been deprecated; use rc settings instead`,
                error: !ci_info_1.default.NETLIFY,
            }]);
        if (deprecationExitCode !== null)
            return deprecationExitCode;
        const updateMode = this.mode === core_1.InstallMode.UpdateLockfile;
        if (updateMode && (this.immutable || this.immutableCache))
            throw new clipanion_1.UsageError(`${core_1.formatUtils.pretty(configuration, `--immutable`, core_1.formatUtils.Type.CODE)} and ${core_1.formatUtils.pretty(configuration, `--immutable-cache`, core_1.formatUtils.Type.CODE)} cannot be used with ${core_1.formatUtils.pretty(configuration, `--mode=update-lockfile`, core_1.formatUtils.Type.CODE)}`);
        const immutable = (this.immutable ?? configuration.get(`enableImmutableInstalls`)) && !updateMode;
        const immutableCache = this.immutableCache && !updateMode;
        if (configuration.projectCwd !== null) {
            const fixReport = await core_1.StreamReport.start({
                configuration,
                json: this.json,
                stdout: this.context.stdout,
                includeFooter: false,
            }, async (report) => {
                let changed = false;
                if (await autofixLegacyPlugins(configuration, immutable)) {
                    report.reportInfo(core_1.MessageName.AUTOMERGE_SUCCESS, `Automatically removed core plugins that are now builtins üëç`);
                    changed = true;
                }
                if (await autofixMergeConflicts(configuration, immutable)) {
                    report.reportInfo(core_1.MessageName.AUTOMERGE_SUCCESS, `Automatically fixed merge conflicts üëç`);
                    changed = true;
                }
                if (changed) {
                    report.reportSeparator();
                }
            });
            if (fixReport.hasErrors()) {
                return fixReport.exitCode();
            }
        }
        if (configuration.projectCwd !== null) {
            const telemetryReport = await core_1.StreamReport.start({
                configuration,
                json: this.json,
                stdout: this.context.stdout,
                includeFooter: false,
            }, async (report) => {
                if (core_1.Configuration.telemetry?.isNew) {
                    core_1.Configuration.telemetry.commitTips();
                    report.reportInfo(core_1.MessageName.TELEMETRY_NOTICE, `Yarn will periodically gather anonymous telemetry: https://yarnpkg.com/advanced/telemetry`);
                    report.reportInfo(core_1.MessageName.TELEMETRY_NOTICE, `Run ${core_1.formatUtils.pretty(configuration, `yarn config set --home enableTelemetry 0`, core_1.formatUtils.Type.CODE)} to disable`);
                    report.reportSeparator();
                }
                else if (core_1.Configuration.telemetry?.shouldShowTips) {
                    const data = await core_1.httpUtils.get(`https://repo.yarnpkg.com/tags`, { configuration, jsonResponse: true }).catch(() => null);
                    if (data !== null) {
                        let newVersion = null;
                        if (core_1.YarnVersion !== null) {
                            const isRcBinary = semver_1.default.prerelease(core_1.YarnVersion);
                            const releaseType = isRcBinary ? `canary` : `stable`;
                            const candidate = data.latest[releaseType];
                            if (semver_1.default.gt(candidate, core_1.YarnVersion)) {
                                newVersion = [releaseType, candidate];
                            }
                        }
                        if (newVersion) {
                            core_1.Configuration.telemetry.commitTips();
                            report.reportInfo(core_1.MessageName.VERSION_NOTICE, `${core_1.formatUtils.applyStyle(configuration, `A new ${newVersion[0]} version of Yarn is available:`, core_1.formatUtils.Style.BOLD)} ${core_1.structUtils.prettyReference(configuration, newVersion[1])}!`);
                            report.reportInfo(core_1.MessageName.VERSION_NOTICE, `Upgrade now by running ${core_1.formatUtils.pretty(configuration, `yarn set version ${newVersion[1]}`, core_1.formatUtils.Type.CODE)}`);
                            report.reportSeparator();
                        }
                        else {
                            const tip = core_1.Configuration.telemetry.selectTip(data.tips);
                            if (tip) {
                                report.reportInfo(core_1.MessageName.TIPS_NOTICE, core_1.formatUtils.pretty(configuration, tip.message, core_1.formatUtils.Type.MARKDOWN_INLINE));
                                if (tip.url)
                                    report.reportInfo(core_1.MessageName.TIPS_NOTICE, `Learn more at ${tip.url}`);
                                report.reportSeparator();
                            }
                        }
                    }
                }
            });
            if (telemetryReport.hasErrors()) {
                return telemetryReport.exitCode();
            }
        }
        const { project, workspace } = await core_1.Project.find(configuration, this.context.cwd);
        const lockfileLastVersion = project.lockfileLastVersion;
        if (lockfileLastVersion !== null) {
            const compatReport = await core_1.StreamReport.start({
                configuration,
                json: this.json,
                stdout: this.context.stdout,
                includeFooter: false,
            }, async (report) => {
                const newSettings = {};
                for (const rule of LOCKFILE_MIGRATION_RULES) {
                    if (rule.selector(lockfileLastVersion) && typeof configuration.sources.get(rule.name) === `undefined`) {
                        configuration.use(`<compat>`, { [rule.name]: rule.value }, project.cwd, { overwrite: true });
                        newSettings[rule.name] = rule.value;
                    }
                }
                if (Object.keys(newSettings).length > 0) {
                    await core_1.Configuration.updateConfiguration(project.cwd, newSettings);
                    report.reportInfo(core_1.MessageName.MIGRATION_SUCCESS, `Migrated your project to the latest Yarn version üöÄ`);
                    report.reportSeparator();
                }
            });
            if (compatReport.hasErrors()) {
                return compatReport.exitCode();
            }
        }
        const cache = await core_1.Cache.find(configuration, { immutable: immutableCache, check: this.checkCache });
        if (!workspace)
            throw new cli_1.WorkspaceRequiredError(project.cwd, this.context.cwd);
        await project.restoreInstallState({
            restoreResolutions: false,
        });
        const enableHardenedMode = configuration.get(`enableHardenedMode`);
        if (enableHardenedMode && typeof configuration.sources.get(`enableHardenedMode`) === `undefined`) {
            await core_1.StreamReport.start({
                configuration,
                json: this.json,
                stdout: this.context.stdout,
                includeFooter: false,
            }, async (report) => {
                report.reportWarning(core_1.MessageName.UNNAMED, `Yarn detected that the current workflow is executed from a public pull request. For safety the hardened mode has been enabled.`);
                report.reportWarning(core_1.MessageName.UNNAMED, `It will prevent malicious lockfile manipulations, in exchange for a slower install time. You can opt-out if necessary; check our ${core_1.formatUtils.applyHyperlink(configuration, `documentation`, `https://yarnpkg.com/features/security#hardened-mode`)} for more details.`);
                report.reportSeparator();
            });
        }
        if (this.refreshLockfile ?? enableHardenedMode)
            project.lockfileNeedsRefresh = true;
        const checkResolutions = this.checkResolutions ?? enableHardenedMode;
        // Important: Because other commands also need to run installs, if you
        // get in a situation where you need to change this file in order to
        // customize the install it's very likely you're doing something wrong.
        // This file should stay super super simple, and the configuration and
        // install logic should be implemented elsewhere (probably in either of
        // the Configuration and Install classes). Feel free to open an issue
        // in order to ask for design feedback before writing features.
        const report = await core_1.StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
            forceSectionAlignment: true,
            includeLogs: true,
            includeVersion: true,
        }, async (report) => {
            await project.install({ cache, report, immutable, checkResolutions, mode: this.mode });
        });
        return report.exitCode();
    }
}
YarnCommand.paths = [
    [`install`],
    clipanion_1.Command.Default,
];
YarnCommand.usage = clipanion_1.Command.Usage({
    description: `install the project dependencies`,
    details: `
      This command sets up your project if needed. The installation is split into four different steps that each have their own characteristics:

      - **Resolution:** First the package manager will resolve your dependencies. The exact way a dependency version is privileged over another isn't standardized outside of the regular semver guarantees. If a package doesn't resolve to what you would expect, check that all dependencies are correctly declared (also check our website for more information: ).

      - **Fetch:** Then we download all the dependencies if needed, and make sure that they're all stored within our cache (check the value of \`cacheFolder\` in \`yarn config\` to see where the cache files are stored).

      - **Link:** Then we send the dependency tree information to internal plugins tasked with writing them on the disk in some form (for example by generating the .pnp.cjs file you might know).

      - **Build:** Once the dependency tree has been written on the disk, the package manager will now be free to run the build scripts for all packages that might need it, in a topological order compatible with the way they depend on one another. See https://yarnpkg.com/advanced/lifecycle-scripts for detail.

      Note that running this command is not part of the recommended workflow. Yarn supports zero-installs, which means that as long as you store your cache and your .pnp.cjs file inside your repository, everything will work without requiring any install right after cloning your repository or switching branches.

      If the \`--immutable\` option is set (defaults to true on CI), Yarn will abort with an error exit code if the lockfile was to be modified (other paths can be added using the \`immutablePatterns\` configuration setting). For backward compatibility we offer an alias under the name of \`--frozen-lockfile\`, but it will be removed in a later release.

      If the \`--immutable-cache\` option is set, Yarn will abort with an error exit code if the cache folder was to be modified (either because files would be added, or because they'd be removed).

      If the \`--refresh-lockfile\` option is set, Yarn will keep the same resolution for the packages currently in the lockfile but will refresh their metadata. If used together with \`--immutable\`, it can validate that the lockfile information are consistent. This flag is enabled by default when Yarn detects it runs within a pull request context.

      If the \`--check-cache\` option is set, Yarn will always refetch the packages and will ensure that their checksum matches what's 1/ described in the lockfile 2/ inside the existing cache files (if present). This is recommended as part of your CI workflow if you're both following the Zero-Installs model and accepting PRs from third-parties, as they'd otherwise have the ability to alter the checked-in packages before submitting them.

      If the \`--inline-builds\` option is set, Yarn will verbosely print the output of the build steps of your dependencies (instead of writing them into individual files). This is likely useful mostly for debug purposes only when using Docker-like environments.

      If the \`--mode=<mode>\` option is set, Yarn will change which artifacts are generated. The modes currently supported are:

      - \`skip-build\` will not run the build scripts at all. Note that this is different from setting \`enableScripts\` to false because the latter will disable build scripts, and thus affect the content of the artifacts generated on disk, whereas the former will just disable the build step - but not the scripts themselves, which just won't run.

      - \`update-lockfile\` will skip the link step altogether, and only fetch packages that are missing from the lockfile (or that have no associated checksums). This mode is typically used by tools like Renovate or Dependabot to keep a lockfile up-to-date without incurring the full install cost.
    `,
    examples: [[
            `Install the project`,
            `$0 install`,
        ], [
            `Validate a project when using Zero-Installs`,
            `$0 install --immutable --immutable-cache`,
        ], [
            `Validate a project when using Zero-Installs (slightly safer if you accept external PRs)`,
            `$0 install --immutable --immutable-cache --check-cache`,
        ]],
});
exports.default = YarnCommand;
const MERGE_CONFLICT_START = `<<<<<<<`;
async function autofixMergeConflicts(configuration, immutable) {
    if (!configuration.projectCwd)
        return false;
    const lockfilePath = fslib_1.ppath.join(configuration.projectCwd, fslib_1.Filename.lockfile);
    if (!await fslib_1.xfs.existsPromise(lockfilePath))
        return false;
    const file = await fslib_1.xfs.readFilePromise(lockfilePath, `utf8`);
    if (!file.includes(MERGE_CONFLICT_START))
        return false;
    if (immutable)
        throw new core_1.ReportError(core_1.MessageName.AUTOMERGE_IMMUTABLE, `Cannot autofix a lockfile when running an immutable install`);
    let commits = await core_1.execUtils.execvp(`git`, [`rev-parse`, `MERGE_HEAD`, `HEAD`], {
        cwd: configuration.projectCwd,
    });
    if (commits.code !== 0) {
        commits = await core_1.execUtils.execvp(`git`, [`rev-parse`, `REBASE_HEAD`, `HEAD`], {
            cwd: configuration.projectCwd,
        });
    }
    if (commits.code !== 0) {
        commits = await core_1.execUtils.execvp(`git`, [`rev-parse`, `CHERRY_PICK_HEAD`, `HEAD`], {
            cwd: configuration.projectCwd,
        });
    }
    if (commits.code !== 0)
        throw new core_1.ReportError(core_1.MessageName.AUTOMERGE_GIT_ERROR, `Git returned an error when trying to find the commits pertaining to the conflict`);
    let variants = await Promise.all(commits.stdout.trim().split(/\n/).map(async (hash) => {
        const content = await core_1.execUtils.execvp(`git`, [`show`, `${hash}:./${fslib_1.Filename.lockfile}`], {
            cwd: configuration.projectCwd,
        });
        if (content.code !== 0)
            throw new core_1.ReportError(core_1.MessageName.AUTOMERGE_GIT_ERROR, `Git returned an error when trying to access the lockfile content in ${hash}`);
        try {
            return (0, parsers_1.parseSyml)(content.stdout);
        }
        catch {
            throw new core_1.ReportError(core_1.MessageName.AUTOMERGE_FAILED_TO_PARSE, `A variant of the conflicting lockfile failed to parse`);
        }
    }));
    // Old-style lockfiles should be filtered out (for example when switching
    // from a Yarn 2 branch to a Yarn 1 branch).
    variants = variants.filter(variant => {
        return !!variant.__metadata;
    });
    for (const variant of variants) {
        // Pre-lockfile v7, the entries weren't normalized (ie we had "foo@x.y.z"
        // in the lockfile rather than "foo@npm:x.y.z")
        if (variant.__metadata.version < 7) {
            for (const key of Object.keys(variant)) {
                if (key === `__metadata`)
                    continue;
                const descriptor = core_1.structUtils.parseDescriptor(key, true);
                const normalizedDescriptor = configuration.normalizeDependency(descriptor);
                const newKey = core_1.structUtils.stringifyDescriptor(normalizedDescriptor);
                if (newKey !== key) {
                    variant[newKey] = variant[key];
                    delete variant[key];
                }
            }
        }
        // We encode the cacheKeys inside the checksums so that the reconciliation
        // can merge the data together
        for (const key of Object.keys(variant)) {
            if (key === `__metadata`)
                continue;
            const checksum = variant[key].checksum;
            if (typeof checksum === `string` && checksum.includes(`/`))
                continue;
            variant[key].checksum = `${variant.__metadata.cacheKey}/${checksum}`;
        }
    }
    const merged = Object.assign({}, ...variants);
    // We must keep the lockfile version as small as necessary to force Yarn to
    // refresh the merged-in lockfile metadata that may be missing.
    merged.__metadata.version = `${Math.min(...variants.map(variant => {
        return parseInt(variant.__metadata.version ?? 0);
    }))}`;
    // It shouldn't matter, since the cacheKey have been embed within the checksums
    merged.__metadata.cacheKey = `merged`;
    // parse as valid YAML except that the objects become strings. We can use
    // that to detect them. Damn, it's really ugly though.
    for (const [key, value] of Object.entries(merged))
        if (typeof value === `string`)
            delete merged[key];
    await fslib_1.xfs.changeFilePromise(lockfilePath, (0, parsers_1.stringifySyml)(merged), {
        automaticNewlines: true,
    });
    return true;
}
async function autofixLegacyPlugins(configuration, immutable) {
    if (!configuration.projectCwd)
        return false;
    const legacyPlugins = [];
    const yarnPluginDir = fslib_1.ppath.join(configuration.projectCwd, `.yarn/plugins/@yarnpkg`);
    const changed = await core_1.Configuration.updateConfiguration(configuration.projectCwd, {
        plugins: plugins => {
            if (!Array.isArray(plugins))
                return plugins;
            const filteredPlugins = plugins.filter((plugin) => {
                if (!plugin.path)
                    return true;
                const resolvedPath = fslib_1.ppath.resolve(configuration.projectCwd, plugin.path);
                const isLegacy = core_1.LEGACY_PLUGINS.has(plugin.spec) && fslib_1.ppath.contains(yarnPluginDir, resolvedPath);
                if (isLegacy)
                    legacyPlugins.push(resolvedPath);
                return !isLegacy;
            });
            if (filteredPlugins.length === 0)
                return core_1.Configuration.deleteProperty;
            if (filteredPlugins.length === plugins.length)
                return plugins;
            return filteredPlugins;
        },
    }, {
        immutable,
    });
    if (!changed)
        return false;
    await Promise.all(legacyPlugins.map(async (pluginPath) => {
        await fslib_1.xfs.removePromise(pluginPath);
    }));
    return true;
}
