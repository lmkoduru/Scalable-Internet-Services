"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class PluginCheckCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.json = clipanion_1.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`,
        });
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const rcFiles = await core_1.Configuration.findRcFiles(this.context.cwd);
        const report = await core_1.StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
        }, async (report) => {
            for (const rcFile of rcFiles) {
                if (!rcFile.data?.plugins)
                    continue;
                for (const plugin of rcFile.data.plugins) {
                    if (!plugin.checksum)
                        continue;
                    if (!plugin.spec.match(/^https?:/))
                        continue;
                    const newBuffer = await core_1.httpUtils.get(plugin.spec, { configuration });
                    const newChecksum = core_1.hashUtils.makeHash(newBuffer);
                    if (plugin.checksum === newChecksum)
                        continue;
                    const prettyPath = core_1.formatUtils.pretty(configuration, plugin.path, core_1.formatUtils.Type.PATH);
                    const prettySpec = core_1.formatUtils.pretty(configuration, plugin.spec, core_1.formatUtils.Type.URL);
                    const prettyMessage = `${prettyPath} is different from the file provided by ${prettySpec}`;
                    report.reportJson({ ...plugin, newChecksum });
                    report.reportError(core_1.MessageName.UNNAMED, prettyMessage);
                }
            }
        });
        return report.exitCode();
    }
}
PluginCheckCommand.paths = [
    [`plugin`, `check`],
];
PluginCheckCommand.usage = clipanion_1.Command.Usage({
    category: `Plugin-related commands`,
    description: `find all third-party plugins that differ from their own spec`,
    details: `
      Check only the plugins from https.

      If this command detects any plugin differences in the CI environment, it will throw an error.
    `,
    examples: [[
            `find all third-party plugins that differ from their own spec`,
            `$0 plugin check`,
        ]],
});
exports.default = PluginCheckCommand;
