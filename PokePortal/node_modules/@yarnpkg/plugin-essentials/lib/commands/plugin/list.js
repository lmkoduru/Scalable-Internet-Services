"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAvailablePlugins = void 0;
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const parsers_1 = require("@yarnpkg/parsers");
const clipanion_1 = require("clipanion");
const REMOTE_REGISTRY = `https://raw.githubusercontent.com/yarnpkg/berry/master/plugins.yml`;
async function getAvailablePlugins(configuration, version) {
    const raw = await core_1.httpUtils.get(REMOTE_REGISTRY, { configuration });
    const data = (0, parsers_1.parseSyml)(raw.toString());
    return Object.fromEntries(Object.entries(data).filter(([pluginName, pluginData]) => {
        return !version || core_1.semverUtils.satisfiesWithPrereleases(version, pluginData.range ?? `<4.0.0-rc.1`);
    }));
}
exports.getAvailablePlugins = getAvailablePlugins;
// eslint-disable-next-line arca/no-default-export
class PluginListCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.json = clipanion_1.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`,
        });
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const report = await core_1.StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
        }, async (report) => {
            const data = await getAvailablePlugins(configuration, core_1.YarnVersion);
            for (const [name, { experimental, ...rest }] of Object.entries(data)) {
                let label = name;
                if (experimental)
                    label += ` [experimental]`;
                report.reportJson({ name, experimental, ...rest });
                report.reportInfo(null, label);
            }
        });
        return report.exitCode();
    }
}
PluginListCommand.paths = [
    [`plugin`, `list`],
];
PluginListCommand.usage = clipanion_1.Command.Usage({
    category: `Plugin-related commands`,
    description: `list the available official plugins`,
    details: `
      This command prints the plugins available directly from the Yarn repository. Only those plugins can be referenced by name in \`yarn plugin import\`.
    `,
    examples: [[
            `List the official plugins`,
            `$0 plugin list`,
        ]],
});
exports.default = PluginListCommand;
