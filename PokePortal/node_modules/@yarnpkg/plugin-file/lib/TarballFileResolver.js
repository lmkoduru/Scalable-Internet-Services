"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TarballFileResolver = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const core_3 = require("@yarnpkg/core");
const core_4 = require("@yarnpkg/core");
const constants_1 = require("./constants");
const fileUtils = tslib_1.__importStar(require("./fileUtils"));
class TarballFileResolver {
    supportsDescriptor(descriptor, opts) {
        if (!constants_1.TARBALL_REGEXP.test(descriptor.range))
            return false;
        if (descriptor.range.startsWith(constants_1.PROTOCOL))
            return true;
        if (constants_1.FILE_REGEXP.test(descriptor.range))
            return true;
        return false;
    }
    supportsLocator(locator, opts) {
        if (!constants_1.TARBALL_REGEXP.test(locator.reference))
            return false;
        if (locator.reference.startsWith(constants_1.PROTOCOL))
            return true;
        return false;
    }
    shouldPersistResolution(locator, opts) {
        return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
        if (constants_1.FILE_REGEXP.test(descriptor.range))
            descriptor = core_4.structUtils.makeDescriptor(descriptor, `${constants_1.PROTOCOL}${descriptor.range}`);
        return core_4.structUtils.bindDescriptor(descriptor, {
            locator: core_4.structUtils.stringifyLocator(fromLocator),
        });
    }
    getResolutionDependencies(descriptor, opts) {
        return {};
    }
    async getCandidates(descriptor, dependencies, opts) {
        if (!opts.fetchOptions)
            throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
        const { path, parentLocator } = fileUtils.parseSpec(descriptor.range);
        if (parentLocator === null)
            throw new Error(`Assertion failed: The descriptor should have been bound`);
        const temporaryLocator = fileUtils.makeLocator(descriptor, { parentLocator, path, hash: ``, protocol: constants_1.PROTOCOL });
        const buffer = await fileUtils.fetchArchiveFromLocator(temporaryLocator, opts.fetchOptions);
        const hash = core_1.hashUtils.makeHash(buffer).slice(0, 6);
        return [fileUtils.makeLocator(descriptor, { parentLocator, path, hash, protocol: constants_1.PROTOCOL })];
    }
    async getSatisfying(descriptor, dependencies, locators, opts) {
        const [locator] = await this.getCandidates(descriptor, dependencies, opts);
        return {
            locators: locators.filter(candidate => candidate.locatorHash === locator.locatorHash),
            sorted: false,
        };
    }
    async resolve(locator, opts) {
        if (!opts.fetchOptions)
            throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
        const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
        const manifest = await core_4.miscUtils.releaseAfterUseAsync(async () => {
            return await core_2.Manifest.find(packageFetch.prefixPath, { baseFs: packageFetch.packageFs });
        }, packageFetch.releaseFs);
        return {
            ...locator,
            version: manifest.version || `0.0.0`,
            languageName: manifest.languageName || opts.project.configuration.get(`defaultLanguageName`),
            linkType: core_3.LinkType.HARD,
            conditions: manifest.getConditions(),
            dependencies: opts.project.configuration.normalizeDependencyMap(manifest.dependencies),
            peerDependencies: manifest.peerDependencies,
            dependenciesMeta: manifest.dependenciesMeta,
            peerDependenciesMeta: manifest.peerDependenciesMeta,
            bin: manifest.bin,
        };
    }
}
exports.TarballFileResolver = TarballFileResolver;
