"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class InitCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.private = clipanion_1.Option.Boolean(`-p,--private`, false, {
            description: `Initialize a private package`,
        });
        this.workspace = clipanion_1.Option.Boolean(`-w,--workspace`, false, {
            description: `Initialize a workspace root with a \`packages/\` directory`,
        });
        this.install = clipanion_1.Option.String(`-i,--install`, false, {
            tolerateBoolean: true,
            description: `Initialize a package with a specific bundle that will be locked in the project`,
        });
        this.name = clipanion_1.Option.String(`-n,--name`, {
            description: `Initialize a package with the given name`,
        });
        // Options that only mattered on v1
        this.usev2 = clipanion_1.Option.Boolean(`-2`, false, { hidden: true });
        this.yes = clipanion_1.Option.Boolean(`-y,--yes`, { hidden: true });
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const install = typeof this.install === `string`
            ? this.install
            : this.usev2 || this.install === true
                ? `latest`
                : null;
        if (install !== null) {
            return await this.executeProxy(configuration, install);
        }
        else {
            return await this.executeRegular(configuration);
        }
    }
    async executeProxy(configuration, version) {
        if (configuration.projectCwd !== null && configuration.projectCwd !== this.context.cwd)
            throw new clipanion_1.UsageError(`Cannot use the --install flag from within a project subdirectory`);
        if (!fslib_1.xfs.existsSync(this.context.cwd))
            await fslib_1.xfs.mkdirPromise(this.context.cwd, { recursive: true });
        const lockfilePath = fslib_1.ppath.join(this.context.cwd, fslib_1.Filename.lockfile);
        if (!fslib_1.xfs.existsSync(lockfilePath))
            await fslib_1.xfs.writeFilePromise(lockfilePath, ``);
        const versionExitCode = await this.cli.run([`set`, `version`, version], { quiet: true });
        if (versionExitCode !== 0)
            return versionExitCode;
        const args = [];
        if (this.private)
            args.push(`-p`);
        if (this.workspace)
            args.push(`-w`);
        if (this.name)
            args.push(`-n=${this.name}`);
        if (this.yes)
            args.push(`-y`);
        return await fslib_1.xfs.mktempPromise(async (binFolder) => {
            const { code } = await core_2.execUtils.pipevp(`yarn`, [`init`, ...args], {
                cwd: this.context.cwd,
                stdin: this.context.stdin,
                stdout: this.context.stdout,
                stderr: this.context.stderr,
                env: await core_2.scriptUtils.makeScriptEnv({ binFolder }),
            });
            return code;
        });
    }
    async executeRegular(configuration) {
        let existingProject = null;
        try {
            existingProject = (await core_1.Project.find(configuration, this.context.cwd)).project;
        }
        catch {
            existingProject = null;
        }
        if (!fslib_1.xfs.existsSync(this.context.cwd))
            await fslib_1.xfs.mkdirPromise(this.context.cwd, { recursive: true });
        const original = await core_1.Manifest.tryFind(this.context.cwd);
        const manifest = original ?? new core_1.Manifest();
        const fields = Object.fromEntries(configuration.get(`initFields`).entries());
        manifest.load(fields);
        manifest.name = manifest.name
            ?? core_2.structUtils.makeIdent(configuration.get(`initScope`), this.name ?? fslib_1.ppath.basename(this.context.cwd));
        manifest.packageManager = core_1.YarnVersion && core_1.miscUtils.isTaggedYarnVersion(core_1.YarnVersion)
            ? `yarn@${core_1.YarnVersion}`
            : null;
        if ((!original && this.workspace) || this.private)
            manifest.private = true;
        if (this.workspace && manifest.workspaceDefinitions.length === 0) {
            await fslib_1.xfs.mkdirPromise(fslib_1.ppath.join(this.context.cwd, `packages`), { recursive: true });
            manifest.workspaceDefinitions = [{
                    pattern: `packages/*`,
                }];
        }
        const serialized = {};
        manifest.exportTo(serialized);
        const manifestPath = fslib_1.ppath.join(this.context.cwd, core_1.Manifest.fileName);
        await fslib_1.xfs.changeFilePromise(manifestPath, `${JSON.stringify(serialized, null, 2)}\n`, {
            automaticNewlines: true,
        });
        const changedPaths = [
            manifestPath,
        ];
        const readmePath = fslib_1.ppath.join(this.context.cwd, `README.md`);
        if (!fslib_1.xfs.existsSync(readmePath)) {
            await fslib_1.xfs.writeFilePromise(readmePath, `# ${core_2.structUtils.stringifyIdent(manifest.name)}\n`);
            changedPaths.push(readmePath);
        }
        if (!existingProject || existingProject.cwd === this.context.cwd) {
            const lockfilePath = fslib_1.ppath.join(this.context.cwd, fslib_1.Filename.lockfile);
            if (!fslib_1.xfs.existsSync(lockfilePath)) {
                await fslib_1.xfs.writeFilePromise(lockfilePath, ``);
                changedPaths.push(lockfilePath);
            }
            const gitignoreLines = [
                `.yarn/*`,
                `!.yarn/patches`,
                `!.yarn/plugins`,
                `!.yarn/releases`,
                `!.yarn/sdks`,
                `!.yarn/versions`,
                ``,
                `# Swap the comments on the following lines if you wish to use zero-installs`,
                `# In that case, don't forget to run \`yarn config set enableGlobalCache false\`!`,
                `# Documentation here: https://yarnpkg.com/features/caching#zero-installs`,
                ``,
                `#!.yarn/cache`,
                `.pnp.*`,
            ];
            const gitignoreBody = gitignoreLines.map(line => {
                return `${line}\n`;
            }).join(``);
            const gitignorePath = fslib_1.ppath.join(this.context.cwd, `.gitignore`);
            if (!fslib_1.xfs.existsSync(gitignorePath)) {
                await fslib_1.xfs.writeFilePromise(gitignorePath, gitignoreBody);
                changedPaths.push(gitignorePath);
            }
            const gitattributesLines = [
                `/.yarn/**            linguist-vendored`,
                `/.yarn/releases/*    binary`,
                `/.yarn/plugins/**/*  binary`,
                `/.pnp.*              binary linguist-generated`,
            ];
            const gitattributesBody = gitattributesLines.map(line => {
                return `${line}\n`;
            }).join(``);
            const gitattributesPath = fslib_1.ppath.join(this.context.cwd, `.gitattributes`);
            if (!fslib_1.xfs.existsSync(gitattributesPath)) {
                await fslib_1.xfs.writeFilePromise(gitattributesPath, gitattributesBody);
                changedPaths.push(gitattributesPath);
            }
            const editorConfigProperties = {
                [`*`]: {
                    endOfLine: `lf`,
                    insertFinalNewline: true,
                },
                [`*.{js,json,yml}`]: {
                    charset: `utf-8`,
                    indentStyle: `space`,
                    indentSize: 2,
                },
            };
            core_1.miscUtils.mergeIntoTarget(editorConfigProperties, configuration.get(`initEditorConfig`));
            let editorConfigBody = `root = true\n`;
            for (const [selector, props] of Object.entries(editorConfigProperties)) {
                editorConfigBody += `\n[${selector}]\n`;
                for (const [propName, propValue] of Object.entries(props)) {
                    const snakeCaseName = propName.replace(/[A-Z]/g, $0 => `_${$0.toLowerCase()}`);
                    editorConfigBody += `${snakeCaseName} = ${propValue}\n`;
                }
            }
            const editorConfigPath = fslib_1.ppath.join(this.context.cwd, `.editorconfig`);
            if (!fslib_1.xfs.existsSync(editorConfigPath)) {
                await fslib_1.xfs.writeFilePromise(editorConfigPath, editorConfigBody);
                changedPaths.push(editorConfigPath);
            }
            await this.cli.run([`install`], {
                quiet: true,
            });
            if (!fslib_1.xfs.existsSync(fslib_1.ppath.join(this.context.cwd, `.git`))) {
                await core_2.execUtils.execvp(`git`, [`init`], {
                    cwd: this.context.cwd,
                });
                await core_2.execUtils.execvp(`git`, [`add`, `--`, ...changedPaths], {
                    cwd: this.context.cwd,
                });
                await core_2.execUtils.execvp(`git`, [`commit`, `--allow-empty`, `-m`, `First commit`], {
                    cwd: this.context.cwd,
                });
            }
        }
    }
}
InitCommand.paths = [
    [`init`],
];
InitCommand.usage = clipanion_1.Command.Usage({
    description: `create a new package`,
    details: `
      This command will setup a new package in your local directory.

      If the \`-p,--private\` or \`-w,--workspace\` options are set, the package will be private by default.

      If the \`-w,--workspace\` option is set, the package will be configured to accept a set of workspaces in the \`packages/\` directory.

      If the \`-i,--install\` option is given a value, Yarn will first download it using \`yarn set version\` and only then forward the init call to the newly downloaded bundle. Without arguments, the downloaded bundle will be \`latest\`.

      The initial settings of the manifest can be changed by using the \`initScope\` and \`initFields\` configuration values. Additionally, Yarn will generate an EditorConfig file whose rules can be altered via \`initEditorConfig\`, and will initialize a Git repository in the current directory.
    `,
    examples: [[
            `Create a new package in the local directory`,
            `yarn init`,
        ], [
            `Create a new private package in the local directory`,
            `yarn init -p`,
        ], [
            `Create a new package and store the Yarn release inside`,
            `yarn init -i=latest`,
        ], [
            `Create a new private package and defines it as a workspace root`,
            `yarn init -w`,
        ]],
});
exports.default = InitCommand;
