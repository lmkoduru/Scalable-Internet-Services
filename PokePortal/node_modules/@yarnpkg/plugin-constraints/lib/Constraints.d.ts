/// <reference path="../sources/tauProlog.d.ts" />
import { Ident, Project, Workspace } from '@yarnpkg/core';
import * as constraintUtils from './constraintUtils';
export type EnforcedDependency = {
    workspace: Workspace;
    dependencyIdent: Ident;
    dependencyRange: string | null;
    dependencyType: DependencyType;
};
export type EnforcedField = {
    workspace: Workspace;
    fieldPath: string;
    fieldValue: string | null;
};
export declare enum DependencyType {
    Dependencies = "dependencies",
    DevDependencies = "devDependencies",
    PeerDependencies = "peerDependencies"
}
export declare class Constraints implements constraintUtils.Engine {
    readonly project: Project;
    readonly source: string;
    static find(project: Project): Promise<Constraints>;
    constructor(project: Project);
    getProjectDatabase(): string;
    getDeclarations(): string;
    get fullSource(): string;
    private createSession;
    processClassic(): Promise<{
        enforcedDependencies: EnforcedDependency[];
        enforcedFields: EnforcedField[];
    }>;
    process(): Promise<constraintUtils.ProcessResult>;
    private genEnforcedDependencies;
    private genEnforcedFields;
    query(query: string): AsyncGenerator<Record<string, string | null>, void, unknown>;
}
