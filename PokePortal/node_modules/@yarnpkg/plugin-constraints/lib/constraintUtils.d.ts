import { Configuration, nodeUtils, Project, treeUtils, Workspace } from '@yarnpkg/core';
import { PortablePath } from '@yarnpkg/fslib';
export type ProcessResult = {
    manifestUpdates: Map<PortablePath, Map<string, Map<any, Set<nodeUtils.Caller>>>>;
    reportedErrors: Map<PortablePath, Array<string>>;
};
export interface Engine {
    process(): Promise<ProcessResult | null>;
}
export declare class Index<T extends {
    [key: string]: any;
}> {
    private indexedFields;
    private items;
    private indexes;
    constructor(indexedFields: Array<keyof T>);
    clear(): void;
    insert(item: T): T;
    find(filter?: {
        [K in keyof T]?: any;
    }): T[];
}
export declare function normalizePath(p: Array<string> | string): string;
export type AnnotatedError = {
    text: string;
    fixable: boolean;
};
export declare function applyEngineReport(project: Project, { manifestUpdates, reportedErrors }: ProcessResult, { fix }?: {
    fix?: boolean;
}): {
    changedWorkspaces: Map<Workspace, Record<string, any>>;
    remainingErrors: Map<Workspace, AnnotatedError[]>;
};
export declare function convertReportToRoot(errors: Map<Workspace, Array<AnnotatedError>>, { configuration }: {
    configuration: Configuration;
}): treeUtils.TreeRoot;
