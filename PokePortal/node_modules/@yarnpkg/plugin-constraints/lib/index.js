"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstraintsCheckCommand = exports.ConstraintsSourceCommand = exports.ConstraintsQueryCommand = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const ModernEngine_1 = require("./ModernEngine");
const query_1 = tslib_1.__importDefault(require("./commands/constraints/query"));
exports.ConstraintsQueryCommand = query_1.default;
const source_1 = tslib_1.__importDefault(require("./commands/constraints/source"));
exports.ConstraintsSourceCommand = source_1.default;
const constraints_1 = tslib_1.__importDefault(require("./commands/constraints"));
exports.ConstraintsCheckCommand = constraints_1.default;
const constraintUtils = tslib_1.__importStar(require("./constraintUtils"));
const plugin = {
    configuration: {
        enableConstraintsChecks: {
            description: `If true, constraints will run during installs`,
            type: core_1.SettingsType.BOOLEAN,
            default: false,
        },
        constraintsPath: {
            description: `The path of the constraints file.`,
            type: core_1.SettingsType.ABSOLUTE_PATH,
            default: `./constraints.pro`,
        },
    },
    commands: [
        query_1.default,
        source_1.default,
        constraints_1.default,
    ],
    hooks: {
        async validateProjectAfterInstall(project, { reportError }) {
            if (!project.configuration.get(`enableConstraintsChecks`))
                return;
            const userConfig = await project.loadUserConfig();
            let engine;
            if (userConfig?.constraints) {
                engine = new ModernEngine_1.ModernEngine(project);
            }
            else {
                const { Constraints } = await Promise.resolve().then(() => tslib_1.__importStar(require(`./Constraints`)));
                engine = await Constraints.find(project);
            }
            const result = await engine.process();
            if (!result)
                return;
            const { remainingErrors } = constraintUtils.applyEngineReport(project, result);
            if (remainingErrors.size !== 0) {
                if (project.configuration.isCI) {
                    for (const [workspace, workspaceErrors] of remainingErrors) {
                        for (const error of workspaceErrors) {
                            reportError(core_1.MessageName.CONSTRAINTS_CHECK_FAILED, `${core_1.formatUtils.pretty(project.configuration, workspace.anchoredLocator, core_1.formatUtils.Type.IDENT)}: ${error.text}`);
                        }
                    }
                }
                else {
                    reportError(core_1.MessageName.CONSTRAINTS_CHECK_FAILED, `Constraint check failed; run ${core_1.formatUtils.pretty(project.configuration, `yarn constraints`, core_1.formatUtils.Type.CODE)} for more details`);
                }
            }
        },
    },
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
