"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class ConstraintsSourceCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.verbose = clipanion_1.Option.Boolean(`-v,--verbose`, false, {
            description: `Also print the fact database automatically compiled from the workspace manifests`,
        });
    }
    async execute() {
        const { Constraints } = await Promise.resolve().then(() => __importStar(require(`../../Constraints`)));
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project } = await core_1.Project.find(configuration, this.context.cwd);
        const constraints = await Constraints.find(project);
        this.context.stdout.write(this.verbose ? constraints.fullSource : constraints.source);
    }
}
ConstraintsSourceCommand.paths = [
    [`constraints`, `source`],
];
ConstraintsSourceCommand.usage = clipanion_1.Command.Usage({
    category: `Constraints-related commands`,
    description: `print the source code for the constraints`,
    details: `
      This command will print the Prolog source code used by the constraints engine. Adding the \`-v,--verbose\` flag will print the *full* source code, including the fact database automatically compiled from the workspace manifests.
    `,
    examples: [[
            `Prints the source code`,
            `yarn constraints source`,
        ], [
            `Print the source code and the fact database`,
            `yarn constraints source -v`,
        ]],
});
exports.default = ConstraintsSourceCommand;
