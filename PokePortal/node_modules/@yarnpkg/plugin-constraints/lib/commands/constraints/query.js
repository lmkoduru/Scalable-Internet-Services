"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class ConstraintsQueryCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.json = clipanion_1.Option.Boolean(`--json`, false, {
            description: `Format the output as an NDJSON stream`,
        });
        this.query = clipanion_1.Option.String();
    }
    async execute() {
        const { Constraints } = await Promise.resolve().then(() => __importStar(require(`../../Constraints`)));
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const { project } = await core_1.Project.find(configuration, this.context.cwd);
        const constraints = await Constraints.find(project);
        let query = this.query;
        if (!query.endsWith(`.`))
            query = `${query}.`;
        const report = await core_2.StreamReport.start({
            configuration,
            json: this.json,
            stdout: this.context.stdout,
        }, async (report) => {
            for await (const result of constraints.query(query)) {
                const lines = Array.from(Object.entries(result));
                const lineCount = lines.length;
                const maxVariableNameLength = lines.reduce((max, [variableName]) => Math.max(max, variableName.length), 0);
                for (let i = 0; i < lineCount; i++) {
                    const [variableName, value] = lines[i];
                    report.reportInfo(null, `${getLinePrefix(i, lineCount)}${variableName.padEnd(maxVariableNameLength, ` `)} = ${valueToString(value)}`);
                }
                report.reportJson(result);
            }
        });
        return report.exitCode();
    }
}
ConstraintsQueryCommand.paths = [
    [`constraints`, `query`],
];
ConstraintsQueryCommand.usage = clipanion_1.Command.Usage({
    category: `Constraints-related commands`,
    description: `query the constraints fact database`,
    details: `
      This command will output all matches to the given prolog query.
    `,
    examples: [[
            `List all dependencies throughout the workspace`,
            `yarn constraints query 'workspace_has_dependency(_, DependencyName, _, _).'`,
        ]],
});
exports.default = ConstraintsQueryCommand;
function valueToString(value) {
    if (typeof value !== `string`)
        return `${value}`;
    if (value.match(/^[a-zA-Z][a-zA-Z0-9_]+$/))
        return value;
    return `'${value}'`;
}
function getLinePrefix(index, count) {
    const isFirst = index === 0;
    const isLast = index === count - 1;
    if (isFirst && isLast)
        return ``;
    if (isFirst)
        return `┌ `;
    if (isLast)
        return `└ `;
    return `│ `;
}
