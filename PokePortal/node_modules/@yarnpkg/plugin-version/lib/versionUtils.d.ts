import { Workspace, Project, Report } from '@yarnpkg/core';
import { PortablePath } from '@yarnpkg/fslib';
export declare enum Decision {
    UNDECIDED = "undecided",
    DECLINE = "decline",
    MAJOR = "major",
    MINOR = "minor",
    PATCH = "patch",
    PRERELEASE = "prerelease"
}
export type IncrementDecision = Exclude<Decision, Decision.UNDECIDED | Decision.DECLINE>;
export type Releases = Map<Workspace, string>;
export declare function validateReleaseDecision(decision: unknown): string;
export type VersionFile = {
    project: Project;
    changedFiles: Set<PortablePath>;
    changedWorkspaces: Set<Workspace>;
    releaseRoots: Set<Workspace>;
    releases: Releases;
    saveAll: () => Promise<void>;
} & ({
    root: PortablePath;
    baseHash: string;
    baseTitle: string;
} | {
    root: null;
    baseHash: null;
    baseTitle: null;
});
export declare function resolveVersionFiles(project: Project, { prerelease }?: {
    prerelease?: string | null;
}): Promise<Map<Workspace, string>>;
export declare function clearVersionFiles(project: Project): Promise<void>;
export declare function updateVersionFiles(project: Project, workspaces: Array<Workspace>): Promise<void>;
export declare function openVersionFile(project: Project, opts: {
    allowEmpty: true;
}): Promise<VersionFile>;
export declare function openVersionFile(project: Project, opts?: {
    allowEmpty?: boolean;
}): Promise<VersionFile | null>;
export declare function requireMoreDecisions(versionFile: VersionFile): boolean;
export declare function getUndecidedWorkspaces(versionFile: VersionFile): Set<Workspace>;
export declare function getUndecidedDependentWorkspaces(versionFile: Pick<VersionFile, 'project' | 'releases'>, { include }?: {
    include?: Set<Workspace>;
}): Workspace[][];
export declare function suggestStrategy(from: string, to: string): Decision.MAJOR | Decision.MINOR | Decision.PATCH | Decision.PRERELEASE | null;
export declare function applyStrategy(version: string | null, strategy: string): string;
export declare function applyReleases(project: Project, newVersions: Map<Workspace, string>, { report }: {
    report: Report;
}): void;
export declare function applyPrerelease(version: string, { current, prerelease }: {
    current: string;
    prerelease: string;
}): string;
