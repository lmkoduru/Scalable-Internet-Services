/// <reference types="node" />
import React from 'react';
import { Readable, Writable } from 'stream';
type InferProps<T extends React.ComponentType> = T extends React.ComponentType<infer P> ? P : never;
export type SubmitInjectedComponent<T, C extends React.ComponentType = React.ComponentType> = React.ComponentType<InferProps<C> & {
    useSubmit: (value: T) => void;
}>;
export type RenderFormOptions = {
    stdin: Readable;
    stdout: Writable;
    stderr: Writable;
};
export declare function renderForm<T, C extends React.ComponentType = React.ComponentType>(UserComponent: SubmitInjectedComponent<T, C>, props: InferProps<C>, { stdin, stdout, stderr }: RenderFormOptions): Promise<T | undefined>;
export {};
