"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const plugin_npm_1 = require("@yarnpkg/plugin-npm");
const clipanion_1 = require("clipanion");
// eslint-disable-next-line arca/no-default-export
class NpmWhoamiCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.scope = clipanion_1.Option.String(`-s,--scope`, {
            description: `Print username for the registry configured for a given scope`,
        });
        this.publish = clipanion_1.Option.Boolean(`--publish`, false, {
            description: `Print username for the publish registry`,
        });
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        let registry;
        if (this.scope && this.publish)
            registry = plugin_npm_1.npmConfigUtils.getScopeRegistry(this.scope, { configuration, type: plugin_npm_1.npmConfigUtils.RegistryType.PUBLISH_REGISTRY });
        else if (this.scope)
            registry = plugin_npm_1.npmConfigUtils.getScopeRegistry(this.scope, { configuration });
        else if (this.publish)
            registry = plugin_npm_1.npmConfigUtils.getPublishRegistry((await (0, cli_1.openWorkspace)(configuration, this.context.cwd)).manifest, { configuration });
        else
            registry = plugin_npm_1.npmConfigUtils.getDefaultRegistry({ configuration });
        const report = await core_2.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
        }, async (report) => {
            let response;
            try {
                response = await plugin_npm_1.npmHttpUtils.get(`/-/whoami`, {
                    configuration,
                    registry,
                    authType: plugin_npm_1.npmHttpUtils.AuthType.ALWAYS_AUTH,
                    jsonResponse: true,
                    ident: this.scope ? core_2.structUtils.makeIdent(this.scope, ``) : undefined,
                });
            }
            catch (err) {
                if (err.response?.statusCode === 401 || err.response?.statusCode === 403) {
                    report.reportError(core_1.MessageName.AUTHENTICATION_INVALID, `Authentication failed - your credentials may have expired`);
                    return;
                }
                else {
                    throw err;
                }
            }
            report.reportInfo(core_1.MessageName.UNNAMED, response.username);
        });
        return report.exitCode();
    }
}
NpmWhoamiCommand.paths = [
    [`npm`, `whoami`],
];
NpmWhoamiCommand.usage = clipanion_1.Command.Usage({
    category: `Npm-related commands`,
    description: `display the name of the authenticated user`,
    details: `
      Print the username associated with the current authentication settings to the standard output.

      When using \`-s,--scope\`, the username printed will be the one that matches the authentication settings of the registry associated with the given scope (those settings can be overriden using the \`npmRegistries\` map, and the registry associated with the scope is configured via the \`npmScopes\` map).

      When using \`--publish\`, the registry we'll select will by default be the one used when publishing packages (\`publishConfig.registry\` or \`npmPublishRegistry\` if available, otherwise we'll fallback to the regular \`npmRegistryServer\`).
    `,
    examples: [[
            `Print username for the default registry`,
            `yarn npm whoami`,
        ], [
            `Print username for the registry on a given scope`,
            `yarn npm whoami --scope company`,
        ]],
});
exports.default = NpmWhoamiCommand;
