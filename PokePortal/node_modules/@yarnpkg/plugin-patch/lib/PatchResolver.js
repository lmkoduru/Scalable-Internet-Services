"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchResolver = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const patchUtils = tslib_1.__importStar(require("./patchUtils"));
class PatchResolver {
    supportsDescriptor(descriptor, opts) {
        if (!patchUtils.isPatchDescriptor(descriptor))
            return false;
        return true;
    }
    supportsLocator(locator, opts) {
        if (!patchUtils.isPatchLocator(locator))
            return false;
        return true;
    }
    shouldPersistResolution(locator, opts) {
        return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
        // If the patch is statically defined (ie absolute or a builtin), then we
        // don't need to bind the descriptor to its parent
        const { patchPaths } = patchUtils.parseDescriptor(descriptor);
        if (patchPaths.every(patchPath => !patchUtils.isParentRequired(patchPath)))
            return descriptor;
        return core_1.structUtils.bindDescriptor(descriptor, {
            locator: core_1.structUtils.stringifyLocator(fromLocator),
        });
    }
    getResolutionDependencies(descriptor, opts) {
        const { sourceDescriptor } = patchUtils.parseDescriptor(descriptor);
        return {
            sourceDescriptor: opts.project.configuration.normalizeDependency(sourceDescriptor),
        };
    }
    async getCandidates(descriptor, dependencies, opts) {
        if (!opts.fetchOptions)
            throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
        const { parentLocator, patchPaths } = patchUtils.parseDescriptor(descriptor);
        const patchFiles = await patchUtils.loadPatchFiles(parentLocator, patchPaths, opts.fetchOptions);
        const sourcePackage = dependencies.sourceDescriptor;
        if (typeof sourcePackage === `undefined`)
            throw new Error(`Assertion failed: The dependency should have been resolved`);
        const patchHash = patchUtils.makePatchHash(patchFiles, sourcePackage.version);
        return [patchUtils.makeLocator(descriptor, { parentLocator, sourcePackage, patchPaths, patchHash })];
    }
    async getSatisfying(descriptor, dependencies, locators, opts) {
        const [locator] = await this.getCandidates(descriptor, dependencies, opts);
        return {
            locators: locators.filter(candidate => candidate.locatorHash === locator.locatorHash),
            sorted: false,
        };
    }
    async resolve(locator, opts) {
        const { sourceLocator } = patchUtils.parseLocator(locator);
        const sourcePkg = await opts.resolver.resolve(sourceLocator, opts);
        return { ...sourcePkg, ...locator };
    }
}
exports.PatchResolver = PatchResolver;
