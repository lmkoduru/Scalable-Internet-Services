"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchUtils = exports.PatchCommand = exports.PatchCommitCommand = exports.PatchResolver = exports.PatchFetcher = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const PatchFetcher_1 = require("./PatchFetcher");
Object.defineProperty(exports, "PatchFetcher", { enumerable: true, get: function () { return PatchFetcher_1.PatchFetcher; } });
const PatchResolver_1 = require("./PatchResolver");
Object.defineProperty(exports, "PatchResolver", { enumerable: true, get: function () { return PatchResolver_1.PatchResolver; } });
const patchCommit_1 = tslib_1.__importDefault(require("./commands/patchCommit"));
exports.PatchCommitCommand = patchCommit_1.default;
const patch_1 = tslib_1.__importDefault(require("./commands/patch"));
exports.PatchCommand = patch_1.default;
const patchUtils = tslib_1.__importStar(require("./patchUtils"));
exports.patchUtils = patchUtils;
const plugin = {
    configuration: {
        enableInlineHunks: {
            description: `If true, the installs will print unmatched patch hunks`,
            type: core_1.SettingsType.BOOLEAN,
            default: false,
        },
        patchFolder: {
            description: `Folder where the patch files must be written`,
            type: core_1.SettingsType.ABSOLUTE_PATH,
            default: `./.yarn/patches`,
        },
    },
    commands: [
        patchCommit_1.default,
        patch_1.default,
    ],
    fetchers: [
        PatchFetcher_1.PatchFetcher,
    ],
    resolvers: [
        PatchResolver_1.PatchResolver,
    ],
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
