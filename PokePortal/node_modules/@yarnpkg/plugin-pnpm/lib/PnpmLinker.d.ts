import { Descriptor, FetchResult, Installer, InstallPackageExtraApi, Linker, LinkOptions, Locator, LocatorHash, MinimalLinkOptions, Package } from '@yarnpkg/core';
import { PortablePath } from '@yarnpkg/fslib';
export type PnpmCustomData = {
    locatorByPath: Map<PortablePath, string>;
    pathsByLocator: Map<LocatorHash, {
        packageLocation: PortablePath;
        dependenciesLocation: PortablePath | null;
    }>;
};
export declare class PnpmLinker implements Linker {
    getCustomDataKey(): string;
    supportsPackage(pkg: Package, opts: MinimalLinkOptions): boolean;
    findPackageLocation(locator: Locator, opts: LinkOptions): Promise<PortablePath>;
    findPackageLocator(location: PortablePath, opts: LinkOptions): Promise<Locator | null>;
    makeInstaller(opts: LinkOptions): PnpmInstaller;
    private isEnabled;
}
declare class PnpmInstaller implements Installer {
    private opts;
    private readonly asyncActions;
    private readonly indexFolderPromise;
    constructor(opts: LinkOptions);
    private customData;
    attachCustomData(customData: any): void;
    installPackage(pkg: Package, fetchResult: FetchResult, api: InstallPackageExtraApi): Promise<{
        packageLocation: PortablePath;
        buildRequest: import("@yarnpkg/core").BuildRequest | null;
    }>;
    installPackageSoft(pkg: Package, fetchResult: FetchResult, api: InstallPackageExtraApi): Promise<{
        packageLocation: PortablePath;
        buildRequest: null;
    }>;
    installPackageHard(pkg: Package, fetchResult: FetchResult, api: InstallPackageExtraApi): Promise<{
        packageLocation: PortablePath;
        buildRequest: import("@yarnpkg/core").BuildRequest | null;
    }>;
    attachInternalDependencies(locator: Locator, dependencies: Array<[Descriptor, Locator]>): Promise<void>;
    attachExternalDependents(locator: Locator, dependentPaths: Array<PortablePath>): Promise<void>;
    finalizeInstall(): Promise<{
        customData: PnpmCustomData;
    }>;
}
export {};
