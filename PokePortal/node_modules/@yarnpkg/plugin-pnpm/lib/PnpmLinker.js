"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PnpmLinker = void 0;
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const plugin_pnp_1 = require("@yarnpkg/plugin-pnp");
const clipanion_1 = require("clipanion");
class PnpmLinker {
    getCustomDataKey() {
        return JSON.stringify({
            name: `PnpmLinker`,
            version: 3,
        });
    }
    supportsPackage(pkg, opts) {
        return this.isEnabled(opts);
    }
    async findPackageLocation(locator, opts) {
        if (!this.isEnabled(opts))
            throw new Error(`Assertion failed: Expected the pnpm linker to be enabled`);
        const customDataKey = this.getCustomDataKey();
        const customData = opts.project.linkersCustomData.get(customDataKey);
        if (!customData)
            throw new clipanion_1.UsageError(`The project in ${core_1.formatUtils.pretty(opts.project.configuration, `${opts.project.cwd}/package.json`, core_1.formatUtils.Type.PATH)} doesn't seem to have been installed - running an install there might help`);
        const packagePaths = customData.pathsByLocator.get(locator.locatorHash);
        if (typeof packagePaths === `undefined`)
            throw new clipanion_1.UsageError(`Couldn't find ${core_1.structUtils.prettyLocator(opts.project.configuration, locator)} in the currently installed pnpm map - running an install might help`);
        return packagePaths.packageLocation;
    }
    async findPackageLocator(location, opts) {
        if (!this.isEnabled(opts))
            return null;
        const customDataKey = this.getCustomDataKey();
        const customData = opts.project.linkersCustomData.get(customDataKey);
        if (!customData)
            throw new clipanion_1.UsageError(`The project in ${core_1.formatUtils.pretty(opts.project.configuration, `${opts.project.cwd}/package.json`, core_1.formatUtils.Type.PATH)} doesn't seem to have been installed - running an install there might help`);
        const nmRootLocation = location.match(/(^.*\/node_modules\/(@[^/]*\/)?[^/]+)(\/.*$)/);
        if (nmRootLocation) {
            const nmLocator = customData.locatorByPath.get(nmRootLocation[1]);
            if (nmLocator) {
                return nmLocator;
            }
        }
        let nextPath = location;
        let currentPath = location;
        do {
            currentPath = nextPath;
            nextPath = fslib_1.ppath.dirname(currentPath);
            const locator = customData.locatorByPath.get(currentPath);
            if (locator) {
                return locator;
            }
        } while (nextPath !== currentPath);
        return null;
    }
    makeInstaller(opts) {
        return new PnpmInstaller(opts);
    }
    isEnabled(opts) {
        return opts.project.configuration.get(`nodeLinker`) === `pnpm`;
    }
}
exports.PnpmLinker = PnpmLinker;
class PnpmInstaller {
    constructor(opts) {
        this.opts = opts;
        this.asyncActions = new core_1.miscUtils.AsyncActions(10);
        this.customData = {
            pathsByLocator: new Map(),
            locatorByPath: new Map(),
        };
        this.indexFolderPromise = (0, fslib_1.setupCopyIndex)(fslib_1.xfs, {
            indexPath: fslib_1.ppath.join(opts.project.configuration.get(`globalFolder`), `index`),
        });
    }
    attachCustomData(customData) {
        // We don't want to attach the data because it's only used in the Linker and we'll recompute it anyways in the Installer,
        // it needs to be invalidated because otherwise we'll never prune the store or we might run into various issues.
    }
    async installPackage(pkg, fetchResult, api) {
        switch (pkg.linkType) {
            case core_1.LinkType.SOFT: return this.installPackageSoft(pkg, fetchResult, api);
            case core_1.LinkType.HARD: return this.installPackageHard(pkg, fetchResult, api);
        }
        throw new Error(`Assertion failed: Unsupported package link type`);
    }
    async installPackageSoft(pkg, fetchResult, api) {
        const packageLocation = fslib_1.ppath.resolve(fetchResult.packageFs.getRealPath(), fetchResult.prefixPath);
        const dependenciesLocation = this.opts.project.tryWorkspaceByLocator(pkg)
            ? fslib_1.ppath.join(packageLocation, fslib_1.Filename.nodeModules)
            : null;
        this.customData.pathsByLocator.set(pkg.locatorHash, {
            packageLocation,
            dependenciesLocation,
        });
        return {
            packageLocation,
            buildRequest: null,
        };
    }
    async installPackageHard(pkg, fetchResult, api) {
        const packagePaths = getPackagePaths(pkg, { project: this.opts.project });
        const packageLocation = packagePaths.packageLocation;
        this.customData.locatorByPath.set(packageLocation, core_1.structUtils.stringifyLocator(pkg));
        this.customData.pathsByLocator.set(pkg.locatorHash, packagePaths);
        api.holdFetchResult(this.asyncActions.set(pkg.locatorHash, async () => {
            await fslib_1.xfs.mkdirPromise(packageLocation, { recursive: true });
            // Copy the package source into the <root>/n_m/.store/<hash> directory, so
            // that we can then create symbolic links to it later.
            await fslib_1.xfs.copyPromise(packageLocation, fetchResult.prefixPath, {
                baseFs: fetchResult.packageFs,
                overwrite: false,
                linkStrategy: {
                    type: `HardlinkFromIndex`,
                    indexPath: await this.indexFolderPromise,
                    autoRepair: true,
                },
            });
        }));
        const isVirtual = core_1.structUtils.isVirtualLocator(pkg);
        const devirtualizedLocator = isVirtual ? core_1.structUtils.devirtualizeLocator(pkg) : pkg;
        const buildConfig = {
            manifest: await core_1.Manifest.tryFind(fetchResult.prefixPath, { baseFs: fetchResult.packageFs }) ?? new core_1.Manifest(),
            misc: {
                hasBindingGyp: plugin_pnp_1.jsInstallUtils.hasBindingGyp(fetchResult),
            },
        };
        const dependencyMeta = this.opts.project.getDependencyMeta(devirtualizedLocator, pkg.version);
        const buildRequest = plugin_pnp_1.jsInstallUtils.extractBuildRequest(pkg, buildConfig, dependencyMeta, { configuration: this.opts.project.configuration });
        return {
            packageLocation,
            buildRequest,
        };
    }
    async attachInternalDependencies(locator, dependencies) {
        if (this.opts.project.configuration.get(`nodeLinker`) !== `pnpm`)
            return;
        // We don't install those packages at all, because they can't be used anyway
        if (!isPnpmVirtualCompatible(locator, { project: this.opts.project }))
            return;
        const packagePaths = this.customData.pathsByLocator.get(locator.locatorHash);
        if (typeof packagePaths === `undefined`)
            throw new Error(`Assertion failed: Expected the package to have been registered (${core_1.structUtils.stringifyLocator(locator)})`);
        const { dependenciesLocation, } = packagePaths;
        if (!dependenciesLocation)
            return;
        this.asyncActions.reduce(locator.locatorHash, async (action) => {
            await fslib_1.xfs.mkdirPromise(dependenciesLocation, { recursive: true });
            // Retrieve what's currently inside the package's true nm folder. We
            // will use that to figure out what are the extraneous entries we'll
            // need to remove.
            const initialEntries = await getNodeModulesListing(dependenciesLocation);
            const extraneous = new Map(initialEntries);
            const concurrentPromises = [action];
            const installDependency = (descriptor, dependency) => {
                // Downgrade virtual workspaces (cf isPnpmVirtualCompatible's documentation)
                let targetDependency = dependency;
                if (!isPnpmVirtualCompatible(dependency, { project: this.opts.project })) {
                    this.opts.report.reportWarningOnce(core_1.MessageName.UNNAMED, `The pnpm linker doesn't support providing different versions to workspaces' peer dependencies`);
                    targetDependency = core_1.structUtils.devirtualizeLocator(dependency);
                }
                const depSrcPaths = this.customData.pathsByLocator.get(targetDependency.locatorHash);
                if (typeof depSrcPaths === `undefined`)
                    throw new Error(`Assertion failed: Expected the package to have been registered (${core_1.structUtils.stringifyLocator(dependency)})`);
                const name = core_1.structUtils.stringifyIdent(descriptor);
                const depDstPath = fslib_1.ppath.join(dependenciesLocation, name);
                const depLinkPath = fslib_1.ppath.relative(fslib_1.ppath.dirname(depDstPath), depSrcPaths.packageLocation);
                const existing = extraneous.get(name);
                extraneous.delete(name);
                concurrentPromises.push(Promise.resolve().then(async () => {
                    // No need to update the symlink if it's already the correct one
                    if (existing) {
                        if (existing.isSymbolicLink() && await fslib_1.xfs.readlinkPromise(depDstPath) === depLinkPath) {
                            return;
                        }
                        else {
                            await fslib_1.xfs.removePromise(depDstPath);
                        }
                    }
                    await fslib_1.xfs.mkdirpPromise(fslib_1.ppath.dirname(depDstPath));
                    if (process.platform == `win32` && this.opts.project.configuration.get(`winLinkType`) === core_1.WindowsLinkType.JUNCTIONS) {
                        await fslib_1.xfs.symlinkPromise(depSrcPaths.packageLocation, depDstPath, `junction`);
                    }
                    else {
                        await fslib_1.xfs.symlinkPromise(depLinkPath, depDstPath);
                    }
                }));
            };
            let hasExplicitSelfDependency = false;
            for (const [descriptor, dependency] of dependencies) {
                if (descriptor.identHash === locator.identHash)
                    hasExplicitSelfDependency = true;
                installDependency(descriptor, dependency);
            }
            if (!hasExplicitSelfDependency && !this.opts.project.tryWorkspaceByLocator(locator))
                installDependency(core_1.structUtils.convertLocatorToDescriptor(locator), locator);
            concurrentPromises.push(cleanNodeModules(dependenciesLocation, extraneous));
            await Promise.all(concurrentPromises);
        });
    }
    async attachExternalDependents(locator, dependentPaths) {
        throw new Error(`External dependencies haven't been implemented for the pnpm linker`);
    }
    async finalizeInstall() {
        const storeLocation = getStoreLocation(this.opts.project);
        if (this.opts.project.configuration.get(`nodeLinker`) !== `pnpm`) {
            await fslib_1.xfs.removePromise(storeLocation);
        }
        else {
            let extraneous;
            try {
                extraneous = new Set(await fslib_1.xfs.readdirPromise(storeLocation));
            }
            catch {
                extraneous = new Set();
            }
            for (const { dependenciesLocation } of this.customData.pathsByLocator.values()) {
                if (!dependenciesLocation)
                    continue;
                const subpath = fslib_1.ppath.contains(storeLocation, dependenciesLocation);
                if (subpath === null)
                    continue;
                const [storeEntry] = subpath.split(fslib_1.ppath.sep);
                extraneous.delete(storeEntry);
            }
            await Promise.all([...extraneous].map(async (extraneousEntry) => {
                await fslib_1.xfs.removePromise(fslib_1.ppath.join(storeLocation, extraneousEntry));
            }));
        }
        // Wait for the package installs to catch up
        await this.asyncActions.wait();
        await removeIfEmpty(storeLocation);
        if (this.opts.project.configuration.get(`nodeLinker`) !== `node-modules`)
            await removeIfEmpty(getNodeModulesLocation(this.opts.project));
        return {
            customData: this.customData,
        };
    }
}
function getNodeModulesLocation(project) {
    return fslib_1.ppath.join(project.cwd, fslib_1.Filename.nodeModules);
}
function getStoreLocation(project) {
    return fslib_1.ppath.join(getNodeModulesLocation(project), `.store`);
}
function getPackagePaths(locator, { project }) {
    const pkgKey = core_1.structUtils.slugifyLocator(locator);
    const storeLocation = getStoreLocation(project);
    const packageLocation = fslib_1.ppath.join(storeLocation, pkgKey, `package`);
    const dependenciesLocation = fslib_1.ppath.join(storeLocation, pkgKey, fslib_1.Filename.nodeModules);
    return { packageLocation, dependenciesLocation };
}
function isPnpmVirtualCompatible(locator, { project }) {
    // The pnpm install strategy has a limitation: because Node would always
    // resolve symbolic path to their true location, and because we can't just
    // copy-paste workspaces like we do with normal dependencies, we can't give
    // multiple dependency sets to the same workspace based on how its peer
    // dependencies are satisfied by its dependents (like PnP can).
    //
    // For this reason, we ignore all virtual instances of workspaces, and
    // instead have to rely on the user being aware of this caveat.
    //
    // TODO: Perhaps we could implement an error message when we detect multiple
    // sets in a way that can't be reproduced on disk?
    return !core_1.structUtils.isVirtualLocator(locator) || !project.tryWorkspaceByLocator(locator);
}
async function getNodeModulesListing(nmPath) {
    const listing = new Map();
    let fsListing = [];
    try {
        fsListing = await fslib_1.xfs.readdirPromise(nmPath, { withFileTypes: true });
    }
    catch (err) {
        if (err.code !== `ENOENT`) {
            throw err;
        }
    }
    try {
        for (const entry of fsListing) {
            if (entry.name.startsWith(`.`))
                continue;
            if (entry.name.startsWith(`@`)) {
                const scopeListing = await fslib_1.xfs.readdirPromise(fslib_1.ppath.join(nmPath, entry.name), { withFileTypes: true });
                if (scopeListing.length === 0) {
                    listing.set(entry.name, entry);
                }
                else {
                    for (const subEntry of scopeListing) {
                        listing.set(`${entry.name}/${subEntry.name}`, subEntry);
                    }
                }
            }
            else {
                listing.set(entry.name, entry);
            }
        }
    }
    catch (err) {
        if (err.code !== `ENOENT`) {
            throw err;
        }
    }
    return listing;
}
async function cleanNodeModules(nmPath, extraneous) {
    const removeNamePromises = [];
    const scopesToRemove = new Set();
    for (const name of extraneous.keys()) {
        removeNamePromises.push(fslib_1.xfs.removePromise(fslib_1.ppath.join(nmPath, name)));
        const scope = core_1.structUtils.tryParseIdent(name)?.scope;
        if (scope) {
            scopesToRemove.add(`@${scope}`);
        }
    }
    return Promise.all(removeNamePromises).then(() => Promise.all([...scopesToRemove].map(scope => removeIfEmpty(fslib_1.ppath.join(nmPath, scope)))));
}
async function removeIfEmpty(dir) {
    try {
        await fslib_1.xfs.rmdirPromise(dir);
    }
    catch (error) {
        if (error.code !== `ENOENT` && error.code !== `ENOTEMPTY`) {
            throw error;
        }
    }
}
