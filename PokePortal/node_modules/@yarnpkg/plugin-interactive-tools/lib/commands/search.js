"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const libuiUtils = tslib_1.__importStar(require("@yarnpkg/libui/sources/libuiUtils"));
const clipanion_1 = require("clipanion");
const algolia_1 = require("../algolia");
const TARGETS = [`regular`, `dev`, `peer`];
// eslint-disable-next-line arca/no-default-export
class SearchCommand extends cli_1.BaseCommand {
    async execute() {
        libuiUtils.checkRequirements(this.context);
        const { Gem } = await Promise.resolve().then(() => tslib_1.__importStar(require(`@yarnpkg/libui/sources/components/Gem`)));
        const { ScrollableItems } = await Promise.resolve().then(() => tslib_1.__importStar(require(`@yarnpkg/libui/sources/components/ScrollableItems`)));
        const { useKeypress } = await Promise.resolve().then(() => tslib_1.__importStar(require(`@yarnpkg/libui/sources/hooks/useKeypress`)));
        const { useMinistore } = await Promise.resolve().then(() => tslib_1.__importStar(require(`@yarnpkg/libui/sources/hooks/useMinistore`)));
        const { renderForm } = await Promise.resolve().then(() => tslib_1.__importStar(require(`@yarnpkg/libui/sources/misc/renderForm`)));
        const { default: InkTextInput } = await Promise.resolve().then(() => tslib_1.__importStar(require(`ink-text-input`)));
        const { Box, Text } = await Promise.resolve().then(() => tslib_1.__importStar(require(`ink`)));
        const { default: React, useEffect, useState } = await Promise.resolve().then(() => tslib_1.__importStar(require(`react`)));
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        const Prompt = () => {
            return (React.createElement(Box, { flexDirection: `row` },
                React.createElement(Box, { flexDirection: `column`, width: 48 },
                    React.createElement(Box, null,
                        React.createElement(Text, null,
                            "Press ",
                            React.createElement(Text, { bold: true, color: `cyanBright` }, `<up>`),
                            "/",
                            React.createElement(Text, { bold: true, color: `cyanBright` }, `<down>`),
                            " to move between packages.")),
                    React.createElement(Box, null,
                        React.createElement(Text, null,
                            "Press ",
                            React.createElement(Text, { bold: true, color: `cyanBright` }, `<space>`),
                            " to select a package.")),
                    React.createElement(Box, null,
                        React.createElement(Text, null,
                            "Press ",
                            React.createElement(Text, { bold: true, color: `cyanBright` }, `<space>`),
                            " again to change the target."))),
                React.createElement(Box, { flexDirection: `column` },
                    React.createElement(Box, { marginLeft: 1 },
                        React.createElement(Text, null,
                            "Press ",
                            React.createElement(Text, { bold: true, color: `cyanBright` }, `<enter>`),
                            " to install the selected packages.")),
                    React.createElement(Box, { marginLeft: 1 },
                        React.createElement(Text, null,
                            "Press ",
                            React.createElement(Text, { bold: true, color: `cyanBright` }, `<ctrl+c>`),
                            " to abort.")))));
        };
        const SearchColumnNames = () => {
            return React.createElement(React.Fragment, null,
                React.createElement(Box, { width: 15 },
                    React.createElement(Text, { bold: true, underline: true, color: `gray` }, "Owner")),
                React.createElement(Box, { width: 11 },
                    React.createElement(Text, { bold: true, underline: true, color: `gray` }, "Version")),
                React.createElement(Box, { width: 10 },
                    React.createElement(Text, { bold: true, underline: true, color: `gray` }, "Downloads")));
        };
        const SelectedColumnNames = () => {
            return React.createElement(Box, { width: 17 },
                React.createElement(Text, { bold: true, underline: true, color: `gray` }, "Target"));
        };
        const HitEntry = ({ hit, active }) => {
            const [action, setAction] = useMinistore(hit.name, null);
            useKeypress({ active }, (ch, key) => {
                if (key.name !== `space`)
                    return;
                if (!action) {
                    setAction(TARGETS[0]);
                    return;
                }
                const nextIndex = TARGETS.indexOf(action) + 1;
                if (nextIndex === TARGETS.length) {
                    setAction(null);
                }
                else {
                    setAction(TARGETS[nextIndex]);
                }
            }, [
                action,
                setAction,
            ]);
            const ident = core_1.structUtils.parseIdent(hit.name);
            const prettyIdent = core_1.structUtils.prettyIdent(configuration, ident);
            return (React.createElement(Box, null,
                React.createElement(Box, { width: 45 },
                    React.createElement(Text, { bold: true, wrap: `wrap` }, prettyIdent)),
                React.createElement(Box, { width: 14, marginLeft: 1 },
                    React.createElement(Text, { bold: true, wrap: `truncate` }, hit.owner.name)),
                React.createElement(Box, { width: 10, marginLeft: 1 },
                    React.createElement(Text, { italic: true, wrap: `truncate` }, hit.version)),
                React.createElement(Box, { width: 16, marginLeft: 1 },
                    React.createElement(Text, null, hit.humanDownloadsLast30Days))));
        };
        const SelectedEntry = ({ name, active }) => {
            const [action] = useMinistore(name, null);
            const ident = core_1.structUtils.parseIdent(name);
            return React.createElement(Box, null,
                React.createElement(Box, { width: 47 },
                    React.createElement(Text, { bold: true },
                        ` - `,
                        core_1.structUtils.prettyIdent(configuration, ident))),
                TARGETS.map(target => React.createElement(Box, { key: target, width: 14, marginLeft: 1 },
                    React.createElement(Text, null,
                        ` `,
                        React.createElement(Gem, { active: action === target }),
                        ` `,
                        React.createElement(Text, { bold: true }, target)))));
        };
        const PoweredByAlgolia = () => (React.createElement(Box, { marginTop: 1 },
            React.createElement(Text, null, "Powered by Algolia.")));
        const SearchApp = ({ useSubmit }) => {
            const selectionMap = useMinistore();
            useSubmit(selectionMap);
            const selectedPackages = Array.from(selectionMap.keys()).filter(pkg => selectionMap.get(pkg) !== null);
            const [query, setQuery] = useState(``);
            const [page, setPage] = useState(0);
            const [hits, setHits] = useState([]);
            const handleQueryOnChange = (newQuery) => {
                // Ignore space and tab clicks
                if (newQuery.match(/\t| /))
                    return;
                setQuery(newQuery);
            };
            const fetchHits = async () => {
                setPage(0);
                const res = await (0, algolia_1.search)(query);
                if (res.query === query) {
                    setHits(res.hits);
                }
            };
            const fetchNextPageHits = async () => {
                const res = await (0, algolia_1.search)(query, page + 1);
                if (res.query === query && res.page - 1 === page) {
                    setPage(res.page);
                    setHits([...hits, ...res.hits]);
                }
            };
            useEffect(() => {
                if (!query) {
                    setHits([]);
                }
                else {
                    fetchHits();
                }
            }, [query]);
            return (React.createElement(Box, { flexDirection: `column` },
                React.createElement(Prompt, null),
                React.createElement(Box, { flexDirection: `row`, marginTop: 1 },
                    React.createElement(Text, { bold: true }, "Search: "),
                    React.createElement(Box, { width: 41 },
                        React.createElement(InkTextInput, { value: query, onChange: handleQueryOnChange, placeholder: `i.e. babel, webpack, react...`, showCursor: false })),
                    React.createElement(SearchColumnNames, null)),
                hits.length ?
                    React.createElement(ScrollableItems, { radius: 2, loop: false, children: hits.map(hit => React.createElement(HitEntry, { key: hit.name, hit: hit, active: false })), willReachEnd: fetchNextPageHits }) : React.createElement(Text, { color: `gray` }, "Start typing..."),
                React.createElement(Box, { flexDirection: `row`, marginTop: 1 },
                    React.createElement(Box, { width: 49 },
                        React.createElement(Text, { bold: true }, "Selected:")),
                    React.createElement(SelectedColumnNames, null)),
                selectedPackages.length ?
                    selectedPackages.map(name => React.createElement(SelectedEntry, { key: name, name: name, active: false })) : React.createElement(Text, { color: `gray` }, "No selected packages..."),
                React.createElement(PoweredByAlgolia, null)));
        };
        const installRequests = await renderForm(SearchApp, {}, {
            stdin: this.context.stdin,
            stdout: this.context.stdout,
            stderr: this.context.stderr,
        });
        if (typeof installRequests === `undefined`)
            return 1;
        const dependencies = Array.from(installRequests.keys()).filter(request => installRequests.get(request) === `regular`);
        const devDependencies = Array.from(installRequests.keys()).filter(request => installRequests.get(request) === `dev`);
        const peerDependencies = Array.from(installRequests.keys()).filter(request => installRequests.get(request) === `peer`);
        if (dependencies.length)
            await this.cli.run([`add`, ...dependencies]);
        if (devDependencies.length)
            await this.cli.run([`add`, `--dev`, ...devDependencies]);
        if (peerDependencies)
            await this.cli.run([`add`, `--peer`, ...peerDependencies]);
        return 0;
    }
}
SearchCommand.paths = [
    [`search`],
];
SearchCommand.usage = clipanion_1.Command.Usage({
    category: `Interactive commands`,
    description: `open the search interface`,
    details: `
    This command opens a fullscreen terminal interface where you can search for and install packages from the npm registry.
    `,
    examples: [[
            `Open the search window`,
            `yarn search`,
        ]],
});
exports.default = SearchCommand;
