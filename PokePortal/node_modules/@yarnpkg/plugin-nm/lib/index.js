"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PnpLooseLinker = exports.NodeModulesMode = exports.NodeModulesLinker = void 0;
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const nm_1 = require("@yarnpkg/nm");
const NodeModulesLinker_1 = require("./NodeModulesLinker");
Object.defineProperty(exports, "NodeModulesLinker", { enumerable: true, get: function () { return NodeModulesLinker_1.NodeModulesLinker; } });
Object.defineProperty(exports, "NodeModulesMode", { enumerable: true, get: function () { return NodeModulesLinker_1.NodeModulesMode; } });
const NodeModulesLinker_2 = require("./NodeModulesLinker");
const PnpLooseLinker_1 = require("./PnpLooseLinker");
Object.defineProperty(exports, "PnpLooseLinker", { enumerable: true, get: function () { return PnpLooseLinker_1.PnpLooseLinker; } });
const plugin = {
    hooks: {
        cleanGlobalArtifacts: async (configuration) => {
            const globalHardlinksDirectory = (0, NodeModulesLinker_2.getGlobalHardlinksStore)(configuration);
            await fslib_1.xfs.removePromise(globalHardlinksDirectory);
        },
    },
    configuration: {
        nmHoistingLimits: {
            description: `Prevents packages to be hoisted past specific levels`,
            type: core_1.SettingsType.STRING,
            values: [
                nm_1.NodeModulesHoistingLimits.WORKSPACES,
                nm_1.NodeModulesHoistingLimits.DEPENDENCIES,
                nm_1.NodeModulesHoistingLimits.NONE,
            ],
            default: nm_1.NodeModulesHoistingLimits.NONE,
        },
        nmMode: {
            description: `Defines in which measure Yarn must use hardlinks and symlinks when generated \`node_modules\` directories.`,
            type: core_1.SettingsType.STRING,
            values: [
                NodeModulesLinker_1.NodeModulesMode.CLASSIC,
                NodeModulesLinker_1.NodeModulesMode.HARDLINKS_LOCAL,
                NodeModulesLinker_1.NodeModulesMode.HARDLINKS_GLOBAL,
            ],
            default: NodeModulesLinker_1.NodeModulesMode.CLASSIC,
        },
        nmSelfReferences: {
            description: `Defines whether the linker should generate self-referencing symlinks for workspaces.`,
            type: core_1.SettingsType.BOOLEAN,
            default: true,
        },
    },
    linkers: [
        NodeModulesLinker_1.NodeModulesLinker,
        PnpLooseLinker_1.PnpLooseLinker,
    ],
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
