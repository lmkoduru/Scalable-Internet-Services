import { Locator, Package, FinalizeInstallStatus } from '@yarnpkg/core';
import { Linker, LinkOptions, MinimalLinkOptions } from '@yarnpkg/core';
import { LocatorHash, Descriptor, Configuration } from '@yarnpkg/core';
import { FetchResult, Installer } from '@yarnpkg/core';
import { PortablePath } from '@yarnpkg/fslib';
export declare enum NodeModulesMode {
    CLASSIC = "classic",
    HARDLINKS_LOCAL = "hardlinks-local",
    HARDLINKS_GLOBAL = "hardlinks-global"
}
export declare class NodeModulesLinker implements Linker {
    private installStateCache;
    getCustomDataKey(): string;
    supportsPackage(pkg: Package, opts: MinimalLinkOptions): boolean;
    findPackageLocation(locator: Locator, opts: LinkOptions): Promise<PortablePath>;
    findPackageLocator(location: PortablePath, opts: LinkOptions): Promise<Locator | null>;
    makeInstaller(opts: LinkOptions): NodeModulesInstaller;
    private isEnabled;
}
declare class NodeModulesInstaller implements Installer {
    private opts;
    private localStore;
    private realLocatorChecksums;
    constructor(opts: LinkOptions);
    private customData;
    attachCustomData(customData: any): void;
    installPackage(pkg: Package, fetchResult: FetchResult): Promise<{
        packageLocation: null;
        buildRequest: null;
    } | {
        packageLocation: PortablePath;
        buildRequest: null;
    }>;
    attachInternalDependencies(locator: Locator, dependencies: Array<[Descriptor, Locator]>): Promise<void>;
    attachExternalDependents(locator: Locator, dependentPaths: Array<PortablePath>): Promise<void>;
    finalizeInstall(): Promise<{
        customData: {
            store: Map<LocatorHash, {
                manifest: {
                    bin: Map<string, PortablePath>;
                    scripts: Map<string, string>;
                };
                misc: {
                    hasBindingGyp: boolean;
                };
            }>;
        };
        records: FinalizeInstallStatus[];
    } | undefined>;
}
export declare function getGlobalHardlinksStore(configuration: Configuration): PortablePath;
export {};
