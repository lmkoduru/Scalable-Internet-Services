"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitResolver = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const core_3 = require("@yarnpkg/core");
const gitUtils = tslib_1.__importStar(require("./gitUtils"));
class GitResolver {
    supportsDescriptor(descriptor, opts) {
        return gitUtils.isGitUrl(descriptor.range);
    }
    supportsLocator(locator, opts) {
        return gitUtils.isGitUrl(locator.reference);
    }
    shouldPersistResolution(locator, opts) {
        return true;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
        return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
        return {};
    }
    async getCandidates(descriptor, dependencies, opts) {
        const reference = await gitUtils.resolveUrl(descriptor.range, opts.project.configuration);
        const locator = core_1.structUtils.makeLocator(descriptor, reference);
        return [locator];
    }
    async getSatisfying(descriptor, dependencies, locators, opts) {
        const splitRange = gitUtils.splitRepoUrl(descriptor.range);
        const filtered = locators.filter(locator => {
            if (locator.identHash !== descriptor.identHash)
                return false;
            const splitReference = gitUtils.splitRepoUrl(locator.reference);
            if (splitRange.repo !== splitReference.repo)
                return false;
            // We can only guarantee the coherence of commit selectors, since we have
            // no way to know whether HEAD used to be at the specified commits at
            // some point in time. Similarly, tags can be modified, so we can't rely
            // on them either.
            if (splitRange.treeish.protocol === gitUtils.TreeishProtocols.Commit && splitRange.treeish.request !== splitReference.treeish.request)
                return false;
            return true;
        });
        return {
            locators: filtered,
            sorted: false,
        };
    }
    async resolve(locator, opts) {
        if (!opts.fetchOptions)
            throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
        const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
        const manifest = await core_1.miscUtils.releaseAfterUseAsync(async () => {
            return await core_3.Manifest.find(packageFetch.prefixPath, { baseFs: packageFetch.packageFs });
        }, packageFetch.releaseFs);
        return {
            ...locator,
            version: manifest.version || `0.0.0`,
            languageName: manifest.languageName || opts.project.configuration.get(`defaultLanguageName`),
            linkType: core_2.LinkType.HARD,
            conditions: manifest.getConditions(),
            dependencies: opts.project.configuration.normalizeDependencyMap(manifest.dependencies),
            peerDependencies: manifest.peerDependencies,
            dependenciesMeta: manifest.dependenciesMeta,
            peerDependenciesMeta: manifest.peerDependenciesMeta,
            bin: manifest.bin,
        };
    }
}
exports.GitResolver = GitResolver;
