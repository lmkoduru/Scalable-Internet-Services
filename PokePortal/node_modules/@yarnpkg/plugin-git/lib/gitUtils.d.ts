import { Configuration, Locator, Project } from '@yarnpkg/core';
import { PortablePath } from '@yarnpkg/fslib';
import { normalizeRepoUrl } from './utils/normalizeRepoUrl';
export { normalizeRepoUrl };
export declare enum TreeishProtocols {
    Commit = "commit",
    Head = "head",
    Tag = "tag",
    Semver = "semver"
}
/**
 * Determines whether a given url is a valid github git url via regex
 */
export declare function isGitUrl(url: string): boolean;
export type RepoUrlParts = {
    repo: string;
    treeish: {
        protocol: TreeishProtocols | string | null;
        request: string;
    };
    extra: {
        [key: string]: string;
    };
};
export declare function splitRepoUrl(url: string): RepoUrlParts;
export declare function normalizeLocator(locator: Locator): Locator;
export declare function validateRepoUrl(url: string, { configuration }: {
    configuration: Configuration;
}): string;
export declare function lsRemote(repo: string, configuration: Configuration): Promise<Map<any, any>>;
export declare function resolveUrl(url: string, configuration: Configuration): Promise<string>;
export declare function clone(url: string, configuration: Configuration): Promise<PortablePath>;
export declare function fetchRoot(initialCwd: PortablePath): Promise<PortablePath | null>;
export declare function fetchBase(root: PortablePath, { baseRefs }: {
    baseRefs: Array<string>;
}): Promise<{
    hash: string;
    title: string;
}>;
export declare function fetchChangedFiles(root: PortablePath, { base, project }: {
    base: string;
    project: Project;
}): Promise<PortablePath[]>;
export declare function fetchChangedWorkspaces({ ref, project }: {
    ref: string | true;
    project: Project;
}): Promise<Set<import("@yarnpkg/core").Workspace>>;
