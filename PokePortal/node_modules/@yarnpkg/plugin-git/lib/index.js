"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitResolver = exports.GitFetcher = exports.gitUtils = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const GitFetcher_1 = require("./GitFetcher");
Object.defineProperty(exports, "GitFetcher", { enumerable: true, get: function () { return GitFetcher_1.GitFetcher; } });
const GitResolver_1 = require("./GitResolver");
Object.defineProperty(exports, "GitResolver", { enumerable: true, get: function () { return GitResolver_1.GitResolver; } });
const gitUtils = tslib_1.__importStar(require("./gitUtils"));
exports.gitUtils = gitUtils;
const plugin = {
    configuration: {
        changesetBaseRefs: {
            description: `The base git refs that the current HEAD is compared against when detecting changes. Supports git branches, tags, and commits.`,
            type: core_1.SettingsType.STRING,
            isArray: true,
            isNullable: false,
            default: [`master`, `origin/master`, `upstream/master`, `main`, `origin/main`, `upstream/main`],
        },
        changesetIgnorePatterns: {
            description: `Array of glob patterns; files matching them will be ignored when fetching the changed files`,
            type: core_1.SettingsType.STRING,
            default: [],
            isArray: true,
        },
        cloneConcurrency: {
            description: `Maximal number of concurrent clones`,
            type: core_1.SettingsType.NUMBER,
            default: 2,
        },
    },
    fetchers: [
        GitFetcher_1.GitFetcher,
    ],
    resolvers: [
        GitResolver_1.GitResolver,
    ],
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
