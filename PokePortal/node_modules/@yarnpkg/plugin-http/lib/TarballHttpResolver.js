"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TarballHttpResolver = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const core_3 = require("@yarnpkg/core");
const urlUtils = tslib_1.__importStar(require("./urlUtils"));
class TarballHttpResolver {
    supportsDescriptor(descriptor, opts) {
        return urlUtils.isTgzUrl(descriptor.range);
    }
    supportsLocator(locator, opts) {
        return urlUtils.isTgzUrl(locator.reference);
    }
    shouldPersistResolution(locator, opts) {
        return true;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
        return descriptor;
    }
    getResolutionDependencies(descriptor, opts) {
        return {};
    }
    async getCandidates(descriptor, dependencies, opts) {
        return [core_3.structUtils.convertDescriptorToLocator(descriptor)];
    }
    async getSatisfying(descriptor, dependencies, locators, opts) {
        const [locator] = await this.getCandidates(descriptor, dependencies, opts);
        return {
            locators: locators.filter(candidate => candidate.locatorHash === locator.locatorHash),
            sorted: false,
        };
    }
    async resolve(locator, opts) {
        if (!opts.fetchOptions)
            throw new Error(`Assertion failed: This resolver cannot be used unless a fetcher is configured`);
        const packageFetch = await opts.fetchOptions.fetcher.fetch(locator, opts.fetchOptions);
        const manifest = await core_3.miscUtils.releaseAfterUseAsync(async () => {
            return await core_1.Manifest.find(packageFetch.prefixPath, { baseFs: packageFetch.packageFs });
        }, packageFetch.releaseFs);
        return {
            ...locator,
            version: manifest.version || `0.0.0`,
            languageName: manifest.languageName || opts.project.configuration.get(`defaultLanguageName`),
            linkType: core_2.LinkType.HARD,
            conditions: manifest.getConditions(),
            dependencies: opts.project.configuration.normalizeDependencyMap(manifest.dependencies),
            peerDependencies: manifest.peerDependencies,
            dependenciesMeta: manifest.dependenciesMeta,
            peerDependenciesMeta: manifest.peerDependenciesMeta,
            bin: manifest.bin,
        };
    }
}
exports.TarballHttpResolver = TarballHttpResolver;
