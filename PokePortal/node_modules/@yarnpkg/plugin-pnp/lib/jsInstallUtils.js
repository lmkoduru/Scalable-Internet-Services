"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasBindingGyp = exports.getExtractHint = exports.extractBuildRequest = exports.checkManifestCompatibility = void 0;
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
function checkManifestCompatibility(pkg) {
    return core_1.structUtils.isPackageCompatible(pkg, core_1.nodeUtils.getArchitectureSet());
}
exports.checkManifestCompatibility = checkManifestCompatibility;
function extractBuildRequest(pkg, requirements, dependencyMeta, { configuration }) {
    const directives = [];
    for (const scriptName of [`preinstall`, `install`, `postinstall`])
        if (requirements.manifest.scripts.has(scriptName))
            directives.push({ type: core_1.BuildDirectiveType.SCRIPT, script: scriptName });
    // Detect cases where a package has a binding.gyp but no install script
    if (!requirements.manifest.scripts.has(`install`) && requirements.misc.hasBindingGyp)
        directives.push({ type: core_1.BuildDirectiveType.SHELLCODE, script: `node-gyp rebuild` });
    if (directives.length === 0)
        return null;
    if (pkg.linkType !== core_1.LinkType.HARD)
        return { skipped: true, explain: report => report.reportWarningOnce(core_1.MessageName.SOFT_LINK_BUILD, `${core_1.structUtils.prettyLocator(configuration, pkg)} lists build scripts, but is referenced through a soft link. Soft links don't support build scripts, so they'll be ignored.`) };
    if (dependencyMeta && dependencyMeta.built === false)
        return { skipped: true, explain: report => report.reportInfoOnce(core_1.MessageName.BUILD_DISABLED, `${core_1.structUtils.prettyLocator(configuration, pkg)} lists build scripts, but its build has been explicitly disabled through configuration.`) };
    if (!configuration.get(`enableScripts`) && !dependencyMeta.built)
        return { skipped: true, explain: report => report.reportWarningOnce(core_1.MessageName.DISABLED_BUILD_SCRIPTS, `${core_1.structUtils.prettyLocator(configuration, pkg)} lists build scripts, but all build scripts have been disabled.`) };
    if (!checkManifestCompatibility(pkg))
        return { skipped: true, explain: report => report.reportWarningOnce(core_1.MessageName.INCOMPATIBLE_ARCHITECTURE, `${core_1.structUtils.prettyLocator(configuration, pkg)} The ${core_1.nodeUtils.getArchitectureName()} architecture is incompatible with this package, build skipped.`) };
    return { skipped: false, directives };
}
exports.extractBuildRequest = extractBuildRequest;
const FORCED_EXTRACT_FILETYPES = new Set([
    // Windows can't execute exe files inside zip archives
    `.exe`,
    // May be used for some binaries on Linux; https://askubuntu.com/a/174356
    `.bin`,
    // The c/c++ compiler can't read files from zip archives
    `.h`, `.hh`, `.hpp`, `.c`, `.cc`, `.cpp`,
    // The java runtime can't read files from zip archives
    `.java`, `.jar`,
    // Node opens these through dlopen
    `.node`,
]);
function getExtractHint(fetchResult) {
    return fetchResult.packageFs.getExtractHint({ relevantExtensions: FORCED_EXTRACT_FILETYPES });
}
exports.getExtractHint = getExtractHint;
function hasBindingGyp(fetchResult) {
    const bindingFilePath = fslib_1.ppath.join(fetchResult.prefixPath, `binding.gyp`);
    return fetchResult.packageFs.existsSync(bindingFilePath);
}
exports.hasBindingGyp = hasBindingGyp;
