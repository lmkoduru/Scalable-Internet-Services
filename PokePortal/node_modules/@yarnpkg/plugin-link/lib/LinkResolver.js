"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkResolver = void 0;
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const constants_1 = require("./constants");
class LinkResolver {
    supportsDescriptor(descriptor, opts) {
        if (!descriptor.range.startsWith(constants_1.LINK_PROTOCOL))
            return false;
        return true;
    }
    supportsLocator(locator, opts) {
        if (!locator.reference.startsWith(constants_1.LINK_PROTOCOL))
            return false;
        return true;
    }
    shouldPersistResolution(locator, opts) {
        return false;
    }
    bindDescriptor(descriptor, fromLocator, opts) {
        return core_2.structUtils.bindDescriptor(descriptor, {
            locator: core_2.structUtils.stringifyLocator(fromLocator),
        });
    }
    getResolutionDependencies(descriptor, opts) {
        return {};
    }
    async getCandidates(descriptor, dependencies, opts) {
        const path = descriptor.range.slice(constants_1.LINK_PROTOCOL.length);
        return [core_2.structUtils.makeLocator(descriptor, `${constants_1.LINK_PROTOCOL}${fslib_1.npath.toPortablePath(path)}`)];
    }
    async getSatisfying(descriptor, dependencies, locators, opts) {
        const [locator] = await this.getCandidates(descriptor, dependencies, opts);
        return {
            locators: locators.filter(candidate => candidate.locatorHash === locator.locatorHash),
            sorted: false,
        };
    }
    async resolve(locator, opts) {
        return {
            ...locator,
            version: `0.0.0`,
            languageName: opts.project.configuration.get(`defaultLanguageName`),
            linkType: core_1.LinkType.SOFT,
            conditions: null,
            dependencies: new Map(),
            peerDependencies: new Map(),
            dependenciesMeta: new Map(),
            peerDependenciesMeta: new Map(),
            bin: new Map(),
        };
    }
}
exports.LinkResolver = LinkResolver;
